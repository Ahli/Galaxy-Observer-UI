<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>ahli</groupId>
	<artifactId>ObserverUiSettingsEditor</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>Observer UI Settings Editor</name>
	<organization>
		<!-- Used as the 'Vendor' for JNLP generation -->
		<name>Ahli</name>
	</organization>

	<!-- goal to execute to check for plugins and dependency updates:
			 versions:display-plugin-updates versions:display-dependency-updates
	 -->

	<!-- QUICK SETTINGS -->
	<properties>
		<jarName>Observer UI Settings Editor App</jarName>
		<executableJavaClass>com.ahli.hotkeyUi.application.Main</executableJavaClass>
		<jarTargetPath>../../release/Observer UI Settings Editor</jarTargetPath>
		<!--<installerTargetPath>../../release</installerTargetPath>-->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<moduleName>ObserverUiSettingsEditor</moduleName>
	</properties>

	<build>
		<!-- name of the generated jar -->
		<!--<finalName>${jarName}</finalName>-->
		<sourceDirectory>src/main/java</sourceDirectory>
		<resources>
			<!-- copy res folder to res folder in jar -->
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<!-- copy resources for exe application generation
			<resource>
				<directory>exepackage</directory>
				<targetPath>../jfx/app</targetPath>
				<excludes>
					<exclude>**/*.ico</exclude>
				</excludes>
			</resource> -->
		</resources>

		<pluginManagement>
			<plugins>
				<plugin>
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-antrun-plugin -->
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.8</version>
				</plugin>
				<plugin>
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-assembly-plugin -->
					<artifactId>maven-assembly-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-dependency-plugin -->
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.1</version>
				</plugin>
				<plugin>
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-release-plugin -->
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5.3</version>
				</plugin>

				<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/versions-maven-plugin -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.7</version>
				</plugin>
			</plugins>
		</pluginManagement>


		<plugins>
			<!-- Force requirement of Maven version 3.0+ -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-enforcer-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.0.0-M2</version>
				<executions>
					<execution>
						<id>enforce-maven</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireMavenVersion>
									<version>[3.0.5,)</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<release>11</release> <!-- 9 for maven shade -->
					<excludes>
						<!-- excludes files from being put into same path as classes -->
						<exclude>**/*.txt</exclude>
					</excludes>
					<encoding>UTF-8</encoding>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.ow2.asm</groupId>
						<artifactId>asm</artifactId>
						<version>7.0</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<!-- create executable jar -->
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>${executableJavaClass}</mainClass>
						</manifest>
					</archive>
					<!-- for moditect -->
					<outputDirectory>
						${project.build.directory}/modules
					</outputDirectory>

				</configuration>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-site-plugin -->
				<artifactId>maven-site-plugin</artifactId>
				<version>3.7.1</version>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-deploy-plugin -->
				<artifactId>maven-deploy-plugin</artifactId>
				<version>3.0.0-M1</version>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-install-plugin -->
				<artifactId>maven-install-plugin</artifactId>
				<version>3.0.0-M1</version>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M1</version>
				<configuration>
					<!-- FIX: unit test crashing VM with modules-info -->
					<forkCount>0</forkCount>
				</configuration>
				<dependencies>
					<dependency>
						<!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-surefire-provider -->
						<groupId>org.junit.platform</groupId>
						<artifactId>junit-platform-surefire-provider</artifactId>
						<version>1.3.1</version>
					</dependency>
					<dependency>
						<!-- https://mvnrepository.com/artifact/org.ow2.asm/asm -->
						<groupId>org.ow2.asm</groupId>
						<artifactId>asm</artifactId>
						<version>7.0</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-resources-plugin -->
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-clean-plugin -->
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.1.0</version>
			</plugin>

			<!-- Remove stuff from generated jar (replaces maven-assembly-plugin) -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-shade-plugin -->
			<!-- stops generating a new pom.xml (minus its dependencies) in the
				project that doesn't seem to be used -->
			<!-- minimizeJar = remove unused classes -->
			<!-- do for every artifact -->
			<!-- Removes META-INF/maven/ directory from generated jar -->
			<!--<include>org/apache/commons/logging/impl/LogFactoryImpl**</include>-->
			<!-- <include>Log4j-*.xsd</include> -->
			<!-- <include>Log4j-*.dtd</include> -->
			<!-- <include>**</include> -->
			<!--<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<createDependencyReducedPom>false</createDependencyReducedPom>
					<minimizeJar>true</minimizeJar>
					<filters>
						<filter>
							<artifact>*:*</artifact>
							<excludes>
								<exclude>META-INF/maven/**</exclude>
							</excludes>
						</filter>
						<filter>
							<artifact>org.apache.logging.log4j:*</artifact>
							<includes>
								<include>org/apache/logging/**</include>
								<include>META-INF/**</include>
							</includes>
						</filter>
						<filter>
							<artifact>commons-logging:commons-logging</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
						<filter>
							<artifact>com.lmax:disruptor</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
					</filters>
					<transformers>
						<transformer
								implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
							<manifestEntries>
								<SplashScreen-Image>res/ahliLogo.png</SplashScreen-Image>
							</manifestEntries>
							<mainClass>${executableJavaClass}</mainClass>
						</transformer>
						<transformer
								implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer">
						</transformer>
					</transformers>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<finalName>${jarName}</finalName>
							<outputFile>${project.build.directory}/${jarTargetPath}/${jarName}.jar</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>-->

			<!-- generate .exe installer and program as .exe file -->
			<!-- 8.8.3 does not support java 9 for compiling -->
			<!-- remove non-jdk runtimes in eclipse, else it might use a wrong one -->
			<!-- https://mvnrepository.com/artifact/com.zenjava/javafx-maven-plugin -->
			<!-- exe bundler is smaller, but currently broken for Java9+ -->
			<!--<version>8.8.3</version>-->
			<!--<module-path>target/classes</module-path>-->
			<!--<module>ObserverUiSettingsEditor/com.ahli.hotkeyUi.application.Main</module>-->
			<!--<add-modules>org.apache.commons.lang3</add-modules>-->
			<!--<limit-modules></limit-modules>-->
			<!--<nativeInstallers/>-->
			<!-- required before build-native -->
			<!--<plugin>
				<groupId>com.zenjava</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>8.9.0-SNAPSHOT</version>
				<configuration>
					<mainClass>com.ahli.hotkeyUi.application.Main</mainClass>
					<vendor>Ahli</vendor>
					<nativeReleaseVersion>${project.version}</nativeReleaseVersion>
					<needShortcut>true</needShortcut>
					<needMenu>true</needMenu>
					<bundler>msi</bundler>
					<verbose>true</verbose>
					<bundleArguments>
						<icon>${project.basedir}/exepackage/ahli.ico</icon>
						<installdirChooser>true</installdirChooser>
						<startOnInstall>true</startOnInstall>
						<runtime>C:\Program Files\Java\jre-10.0.2</runtime>
					</bundleArguments>
					<manifestAttributes>
						<SplashScreen-Image>res/ahliLogo.png</SplashScreen-Image>
					</manifestAttributes>
					<deployDir>${project.basedir}/exepackage/deploy</deployDir>
					<nativeOutputDir>${project.build.directory}/${installerTargetPath}/</nativeOutputDir>
				</configuration>
				<executions>
					<execution>
						<id>create-jfxjar</id>
						<phase>package</phase>
						<goals>
							<goal>build-jar</goal>
						</goals>
					</execution>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>native</goal>
						</goals>
					</execution>
				</executions>
			</plugin>-->

			<!--<plugin>
				<groupId>org.owasp</groupId>
				<artifactId>dependency-check-maven</artifactId>
				<version>3.3.4</version>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>-->

			<plugin>
				<groupId>org.moditect</groupId>
				<artifactId>moditect-maven-plugin</artifactId>
				<version>1.0.0.Beta1</version>
				<executions>
					<execution>
						<id>add-module-infos</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>add-module-info</goal>
						</goals>
						<configuration>
							<overwriteExistingFiles>true</overwriteExistingFiles>
							<outputDirectory>${project.build.directory}/modules</outputDirectory>
							<modules>
								<module>
									<artifact>
										<groupId>commons-io</groupId>
										<artifactId>commons-io</artifactId>
										<version>2.6</version>
									</artifact>
									<moduleInfoSource>
										module org.apache.commons.io {
										exports org.apache.commons.io;
										exports org.apache.commons.io.filefilter;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.apache.commons</groupId>
										<artifactId>commons-text</artifactId>
										<version>1.6</version>
									</artifact>
									<moduleInfoSource>
										module org.apache.commons.text {
										exports org.apache.commons.text;
										exports org.apache.commons.text.lookup;
										requires org.apache.commons.lang3;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>com.fasterxml.jackson.core</groupId>
										<artifactId>jackson-core</artifactId>
										<version>2.9.7</version>
									</artifact>
									<moduleInfoSource>
										module com.fasterxml.jackson.core {
										exports com.fasterxml.jackson.core;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.openjfx</groupId>
										<artifactId>javafx-controls</artifactId>
										<version>11.0.1-ea+1</version>
									</artifact>
									<moduleInfoSource>
										module javafx.controlsEmpty {
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>com.lmax</groupId>
										<artifactId>disruptor</artifactId>
										<version>3.4.2</version>
									</artifact>
									<moduleInfoSource>
										module com.lmax.disruptor {
										exports com.lmax.disruptor;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>com.fasterxml.jackson.core</groupId>
										<artifactId>jackson-annotations</artifactId>
										<version>2.9.7</version>
									</artifact>
									<moduleInfoSource>
										module com.fasterxml.jackson.annotation {
										exports com.fasterxml.jackson.annotation;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>commons-logging</groupId>
										<artifactId>commons-logging</artifactId>
										<version>1.2</version>
									</artifact>
									<moduleInfoSource>
										module org.apache.commons.logging {
										exports org.apache.commons.logging;
										exports org.apache.commons.logging.impl;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.apache.logging.log4j</groupId>
										<artifactId>log4j-core</artifactId>
										<version>2.11.1</version>
									</artifact>
									<!-- opens might not be needed -->
									<moduleInfoSource>
										module org.apache.logging.log4j.core {
										exports org.apache.logging.log4j.core;
										requires org.apache.logging.log4j;
										opens org.apache.logging.log4j.core;
										exports org.apache.logging.log4j.core.util;
										opens org.apache.logging.log4j.core.util;
										exports org.apache.logging.log4j.core.tools;
										opens org.apache.logging.log4j.core.tools;
										exports org.apache.logging.log4j.core.time;
										opens org.apache.logging.log4j.core.time;
										exports org.apache.logging.log4j.core.selector;
										opens org.apache.logging.log4j.core.selector;
										exports org.apache.logging.log4j.core.script;
										opens org.apache.logging.log4j.core.script;
										exports org.apache.logging.log4j.core.pattern;
										opens org.apache.logging.log4j.core.pattern;
										exports org.apache.logging.log4j.core.parser;
										opens org.apache.logging.log4j.core.parser;
										exports org.apache.logging.log4j.core.net;
										opens org.apache.logging.log4j.core.net;
										exports org.apache.logging.log4j.core.message;
										opens org.apache.logging.log4j.core.message;
										exports org.apache.logging.log4j.core.lookup;
										opens org.apache.logging.log4j.core.lookup;
										exports org.apache.logging.log4j.core.layout;
										opens org.apache.logging.log4j.core.layout;
										exports org.apache.logging.log4j.core.jmx;
										opens org.apache.logging.log4j.core.jmx;
										exports org.apache.logging.log4j.core.jackson;
										opens org.apache.logging.log4j.core.jackson;
										exports org.apache.logging.log4j.core.impl;
										opens org.apache.logging.log4j.core.impl;
										exports org.apache.logging.log4j.core.filter;
										opens org.apache.logging.log4j.core.filter;
										exports org.apache.logging.log4j.core.config;
										opens org.apache.logging.log4j.core.config;
										exports org.apache.logging.log4j.core.async;
										opens org.apache.logging.log4j.core.async;
										exports org.apache.logging.log4j.core.appender;
										opens org.apache.logging.log4j.core.appender;
										exports org.apache.logging.log4j.core.osgi;
										opens org.apache.logging.log4j.core.osgi;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.apache.commons</groupId>
										<artifactId>commons-lang3</artifactId>
										<version>3.8.1</version>
									</artifact>
									<moduleInfoSource>
										module org.apache.commons.lang3 {
										exports org.apache.commons.lang3;
										exports org.apache.commons.lang3.builder;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.apache.commons</groupId>
										<artifactId>commons-configuration2</artifactId>
										<version>2.4</version>
									</artifact>
									<moduleInfoSource>
										module org.apache.commons.configuration2 {
										exports org.apache.commons.configuration2;
										exports org.apache.commons.configuration2.ex;
										exports org.apache.commons.configuration2.builder.fluent;
										requires org.apache.commons.logging;
										requires org.apache.commons.beanutils;
										requires org.apache.commons.text;
										exports org.apache.commons.configuration2.builder;
										requires org.apache.commons.lang3;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>net.sf.trove4j</groupId>
										<artifactId>core</artifactId>
										<version>3.1.0</version>
									</artifact>
									<moduleInfoSource>
										module gnu.trove {
										exports gnu.trove;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>com.fasterxml.jackson.core</groupId>
										<artifactId>jackson-databind</artifactId>
										<version>2.9.7</version>
									</artifact>
									<moduleInfoSource>
										module com.fasterxml.jackson.databind {
										exports com.fasterxml.jackson.databind;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>com.ximpleware</groupId>
										<artifactId>vtd-xml</artifactId>
										<version>2.13.4</version>
									</artifact>
									<moduleInfoSource>
										module vtd.xml {
										exports com.ximpleware;
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.openjfx</groupId>
										<artifactId>javafx-graphics</artifactId>
										<version>11.0.1-ea+1</version>
									</artifact>
									<moduleInfoSource>
										module javafx.graphicsEmpty {
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.openjfx</groupId>
										<artifactId>javafx-media</artifactId>
										<version>11.0.1-ea+1</version>
									</artifact>
									<moduleInfoSource>
										module javafx.mediaEmpty {
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.openjfx</groupId>
										<artifactId>javafx-media</artifactId>
										<version>11.0.1-ea+1</version>
									</artifact>
									<moduleInfoSource>
										module javafx.mediaEmpty {
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.openjfx</groupId>
										<artifactId>javafx-fxml</artifactId>
										<version>11.0.1-ea+1</version>
									</artifact>
									<moduleInfoSource>
										module javafx.fxmlEmpty {
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>org.openjfx</groupId>
										<artifactId>javafx-base</artifactId>
										<version>11.0.1-ea+1</version>
									</artifact>
									<moduleInfoSource>
										module javafx.baseEmpty {
										}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>commons-beanutils</groupId>
										<artifactId>commons-beanutils</artifactId>
										<version>1.9.3</version>
									</artifact>
									<moduleInfoSource>
									module org.apache.commons.beanutils {
										exports org.apache.commons.beanutils;
										requires java.desktop;
										requires org.apache.commons.logging;
										requires java.sql;
									}
									</moduleInfoSource>
								</module>
								<module>
									<artifact>
										<groupId>commons-collections</groupId>
										<artifactId>commons-collections</artifactId>
										<version>3.2.2</version>
									</artifact>
									<moduleInfoSource>
										module org.apache.commons.collections {
										exports org.apache.commons.collections;
										}
									</moduleInfoSource>
								</module>
							</modules>
						</configuration>
					</execution>
					<execution>
						<id>create-runtime-image</id>
						<phase>package</phase>
						<goals>
							<goal>create-runtime-image</goal>
						</goals>
						<configuration>
							<modulePath>
								<path>${project.build.directory}/modules</path>
							</modulePath>
							<modules>
								<module>${moduleName}</module>
							</modules>
							<baseJdk>version=11,vendor=openjdk</baseJdk>
							<outputDirectory>
								${project.build.directory}/jlink-image
							</outputDirectory>
							<!-- launcher doesnt work because module-info.class has no mainClass for some reason... -->
							<!--<launcher>-->
								<!--<name>Test</name>-->
								<!--<module>${moduleName}</module>-->
							<!--</launcher>-->
							<stripDebug>true</stripDebug>
							<compression>2</compression>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--<plugin>-->
			<!--<groupId>com.coderplus.maven.plugins</groupId>-->
			<!--<artifactId>copy-rename-maven-plugin</artifactId>-->
			<!--<version>1.0.1</version>-->
			<!--<executions>-->
			<!--<execution>-->
			<!--<id>copy-target</id>-->
			<!--<phase>package</phase>-->
			<!--<goals>-->
			<!--<goal>copy</goal>-->
			<!--</goals>-->
			<!--<configuration>-->
			<!--<sourceFile>${project.build.directory}/${project.build.finalName}.jar</sourceFile>-->
			<!--<destinationFile>${project.build.directory}/modules/${project.build.finalName}.jar-->
			<!--</destinationFile>-->
			<!--</configuration>-->
			<!--</execution>-->
			<!--</executions>-->
			<!--</plugin>-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/modules</outputDirectory>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
	<dependencies>
		<!-- file IO stuff -->
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

		<!-- log4j2 -->
		<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.11.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.11.1</version>
		</dependency>

		<!-- used in async logging -->
		<!-- https://mvnrepository.com/artifact/com.lmax/disruptor -->
		<dependency>
			<groupId>com.lmax</groupId>
			<artifactId>disruptor</artifactId>
			<version>3.4.2</version>
		</dependency>

		<!-- to get stack trace as String -->
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.8.1</version>
		</dependency>

		<!-- dependency to GalaxyLib -->
		<dependency>
			<groupId>ahli</groupId>
			<artifactId>GalaxyLib</artifactId>
			<version>1.0.0-SNAPSHOT</version>
			<scope>compile</scope>
		</dependency>

		<!-- JDK11 JavaFX -->
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-graphics -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>11.0.1-ea+1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-controls -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>11.0.1-ea+1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-base -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>11.0.1-ea+1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-fxml -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>11.0.1-ea+1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-media -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
			<version>11.0.1-ea+1</version>
		</dependency>

	</dependencies>

	<pluginRepositories>
		<!-- repo for javafx-maven-plugin alpha to support jdk-9
			<pluginRepository>
				<id>oss-sonatype-snapshots</id>
				<url>https://oss.sonatype.org/content/groups/public/</url>
				<snapshots>
					<enabled>true</enabled>
				</snapshots>
			</pluginRepository> -->
	</pluginRepositories>
</project>
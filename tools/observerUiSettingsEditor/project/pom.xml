<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>ahli</groupId>
	<artifactId>ObserverUiSettingsEditor</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>Observer UI Settings Editor</name>
	<organization>
		<!-- Used as the 'Vendor' for JNLP generation -->
		<name>Ahli</name>
	</organization>

	<!-- goal to execute to check for plugins and dependency updates:
			 versions:display-plugin-updates versions:display-dependency-updates
	 -->

	<!-- QUICK SETTINGS -->
	<properties>
		<jarName>Observer UI Settings Editor App</jarName>
		<executableJavaClass>com.ahli.hotkeyUi.application.Main</executableJavaClass>
		<jarTargetPath>../../release/Observer UI Settings Editor</jarTargetPath>
		<installerTargetPath>../../release</installerTargetPath>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<moduleName>ObserverUiSettingsEditor</moduleName>
	</properties>

	<build>
		<!-- name of the generated jar -->
		<finalName>${jarName}</finalName>
		<sourceDirectory>src/main/java</sourceDirectory>
		<resources>
			<!-- copy res folder to res folder in jar -->
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<!-- copy resources for exe application generation -->
			<resource>
				<directory>exepackage</directory>
				<targetPath>../jfx/app</targetPath>
				<excludes>
					<exclude>**/*.ico</exclude>
				</excludes>
			</resource>
		</resources>

		<pluginManagement>
			<plugins>
				<plugin>
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-antrun-plugin -->
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.8</version>
				</plugin>
				<plugin>
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-assembly-plugin -->
					<artifactId>maven-assembly-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-dependency-plugin -->
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.1</version>
				</plugin>
				<plugin>
					<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-release-plugin -->
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5.3</version>
				</plugin>

				<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/versions-maven-plugin -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.7</version>
				</plugin>
			</plugins>
		</pluginManagement>


		<plugins>
			<!-- Force requirement of Maven version 3.0+ -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-enforcer-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.0.0-M2</version>
				<executions>
					<execution>
						<id>enforce-maven</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireMavenVersion>
									<version>[3.0.5,)</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<release>11</release> <!-- 9 for maven shade -->
					<excludes>
						<!-- excludes files from being put into same path as classes -->
						<exclude>**/*.txt</exclude>
					</excludes>
					<encoding>UTF-8</encoding>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
					<!-- parameters for JDK 10
					<parameters>true</parameters>
					<compilerArgument>-.-add-modules=javafx.controls,javafx.base,javafx.fxml,javafx.graphics
					</compilerArgument>-->

					<compilerArgs>
						<!-- for moditect -->
						<compilerArg>--module-path</compilerArg>
						<compilerArg>${project.build.directory}/modules</compilerArg>
					</compilerArgs>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.ow2.asm</groupId>
						<artifactId>asm</artifactId>
						<version>7.0-beta</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<!-- for moditect -->
					<outputDirectory>
						${project.build.directory}/modules
					</outputDirectory>
				</configuration>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-site-plugin -->
				<artifactId>maven-site-plugin</artifactId>
				<version>3.7.1</version>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-deploy-plugin -->
				<artifactId>maven-deploy-plugin</artifactId>
				<version>3.0.0-M1</version>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-install-plugin -->
				<artifactId>maven-install-plugin</artifactId>
				<version>3.0.0-M1</version>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.1</version>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-resources-plugin -->
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-clean-plugin -->
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.1.0</version>
			</plugin>

			<!-- Remove stuff from generated jar (replaces maven-assembly-plugin) -->
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-shade-plugin -->
			<!-- stops generating a new pom.xml (minus its dependencies) in the
				project that doesn't seem to be used -->
			<!-- minimizeJar = remove unused classes -->
			<!-- do for every artifact -->
			<!-- Removes META-INF/maven/ directory from generated jar -->
			<!--<include>org/apache/commons/logging/impl/LogFactoryImpl**</include>-->
			<!-- <include>Log4j-*.xsd</include> -->
			<!-- <include>Log4j-*.dtd</include> -->
			<!-- <include>**</include> -->
			<!--<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.1.1</version>
				<configuration>
					<createDependencyReducedPom>false</createDependencyReducedPom>
					<minimizeJar>true</minimizeJar>
					<filters>
						<filter>
							<artifact>*:*</artifact>
							<excludes>
								<exclude>META-INF/maven/**</exclude>
							</excludes>
						</filter>
						<filter>
							<artifact>org.apache.logging.log4j:*</artifact>
							<includes>
								<include>org/apache/logging/**</include>
								<include>META-INF/**</include>
							</includes>
						</filter>
						<filter>
							<artifact>commons-logging:commons-logging</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
						<filter>
							<artifact>com.lmax:disruptor</artifact>
							<includes>
								<include>**</include>
							</includes>
						</filter>
					</filters>
					<transformers>
						<transformer
								implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
							<manifestEntries>
								<SplashScreen-Image>res/ahliLogo.png</SplashScreen-Image>
							</manifestEntries>
							<mainClass>${executableJavaClass}</mainClass>
						</transformer>
						<transformer
								implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer">
						</transformer>
					</transformers>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<finalName>${jarName}</finalName>
							<outputFile>${project.build.directory}/${jarTargetPath}/${jarName}.jar</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>-->

			<!-- generate .exe installer and program as .exe file -->
			<!-- 8.8.3 does not support java 9 for compiling -->
			<!-- remove non-jdk runtimes in eclipse, else it might use a wrong one -->
			<!-- https://mvnrepository.com/artifact/com.zenjava/javafx-maven-plugin -->
			<!-- exe bundler is smaller, but currently broken for Java9+ -->
			<!--<version>8.8.3</version>-->
			<!--<module-path>target/classes</module-path>-->
			<!--<module>ObserverUiSettingsEditor/com.ahli.hotkeyUi.application.Main</module>-->
			<!--<add-modules>org.apache.commons.lang3</add-modules>-->
			<!--<limit-modules></limit-modules>-->
			<!--<nativeInstallers/>-->
			<!-- required before build-native -->
			<!--<plugin>
				<groupId>com.zenjava</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>8.9.0-SNAPSHOT</version>
				<configuration>
					<mainClass>com.ahli.hotkeyUi.application.Main</mainClass>
					<vendor>Ahli</vendor>
					<nativeReleaseVersion>${project.version}</nativeReleaseVersion>
					<needShortcut>true</needShortcut>
					<needMenu>true</needMenu>
					<bundler>msi</bundler>
					<verbose>true</verbose>
					<bundleArguments>
						<icon>${project.basedir}/exepackage/ahli.ico</icon>
						<installdirChooser>true</installdirChooser>
						<startOnInstall>true</startOnInstall>
						<runtime>C:\Program Files\Java\jre-10.0.2</runtime>
					</bundleArguments>
					<manifestAttributes>
						<SplashScreen-Image>res/ahliLogo.png</SplashScreen-Image>
					</manifestAttributes>
					<deployDir>${project.basedir}/exepackage/deploy</deployDir>
					<nativeOutputDir>${project.build.directory}/${installerTargetPath}/</nativeOutputDir>
				</configuration>
				<executions>
					<execution>
						<id>create-jfxjar</id>
						<phase>package</phase>
						<goals>
							<goal>build-jar</goal>
						</goals>
					</execution>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>native</goal>
						</goals>
					</execution>
				</executions>
			</plugin>-->

			<plugin>
				<groupId>org.owasp</groupId>
				<artifactId>dependency-check-maven</artifactId>
				<version>3.3.2</version>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.moditect</groupId>
				<artifactId>moditect-maven-plugin</artifactId>
				<version>1.0.0.Beta1</version>
				<executions>
					<execution>
						<id>add-module-infos-2</id>
						<phase>package</phase>
						<goals>
							<goal>add-module-info</goal>
						</goals>
						<configuration>
							<!--<jvmVersion>11</jvmVersion>-->
							<module>
								<moduleInfo>
									<name>ObserverUiSettingsEditor</name>
									<opens>
										com.ahli.hotkeyUi.application
									</opens>
								</moduleInfo>
							</module>
						</configuration>
					</execution>
					<execution>
						<id>create-runtime-image</id>
						<phase>package</phase>
						<goals>
							<goal>create-runtime-image</goal>
						</goals>
						<configuration>
							<modulePath>
								<path>${project.build.directory}/modules</path>
							</modulePath>
							<modules>
								<module>ObserverUiSettingsEditor</module>
								<!--<module>javafx.base</module>-->
							</modules>
							<!--<excludedResources>-->
							<!--<pattern>glob:/com.example/**</pattern>-->
							<!--</excludedResources>-->
							<baseJdk>version=11,vendor=openjdk,platform=windows-x64</baseJdk>
							<launcher>
								<name>Observer UI Settings Editor</name>
								<module>ObserverUiSettingsEditor</module>
							</launcher>
							<compression>2</compression>
							<stripDebug>true</stripDebug>
							<outputDirectory>
								${project.build.directory}/jlink-image
							</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- used to make the program run
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${java.home}/bin/java</executable>
							<arguments>
								<argument>-.-module-path</argument>
								<argument>
									${project.build.directory}/modules
								</argument>
								<argument>-.-module</argument>
								<argument>${moduleName}/${executableJavaClass}</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin> -->
			<plugin>
				<groupId>com.coderplus.maven.plugins</groupId>
				<artifactId>copy-rename-maven-plugin</artifactId>
				<version>1.0.1</version>
				<executions>
					<execution>
						<id>copy-target</id>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<sourceFile>${project.build.directory}/${project.build.finalName}.jar</sourceFile>
							<destinationFile>${project.build.directory}/modules/${project.build.finalName}.jar
							</destinationFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/modules</outputDirectory>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
	<dependencies>
		<!-- file IO stuff -->
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

		<!-- log4j2 -->
		<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.11.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.11.1</version>
		</dependency>

		<!-- used in async logging -->
		<!-- https://mvnrepository.com/artifact/com.lmax/disruptor -->
		<dependency>
			<groupId>com.lmax</groupId>
			<artifactId>disruptor</artifactId>
			<version>3.4.2</version>
		</dependency>

		<!-- to get stack trace as String -->
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.8.1</version>
		</dependency>

		<!-- dependency to GalaxyLib -->
		<dependency>
			<groupId>ahli</groupId>
			<artifactId>GalaxyLib</artifactId>
			<version>1.0.0-SNAPSHOT</version>
			<scope>compile</scope>
		</dependency>

		<!-- JDK11 JavaFX -->
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-graphics -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>11</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-controls -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>11</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-base -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>11</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-fxml -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>11</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.openjfx/javafx-media -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
			<version>11</version>
		</dependency>

	</dependencies>

	<pluginRepositories>
		<!-- repo for javafx-maven-plugin alpha to support jdk-9
			<pluginRepository>
				<id>oss-sonatype-snapshots</id>
				<url>https://oss.sonatype.org/content/groups/public/</url>
				<snapshots>
					<enabled>true</enabled>
				</snapshots>
			</pluginRepository> -->
	</pluginRepositories>
</project>
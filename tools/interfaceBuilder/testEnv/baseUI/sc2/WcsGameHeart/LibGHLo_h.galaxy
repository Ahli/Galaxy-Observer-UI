include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: WCS GameHeart
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libGHLo_ge_GraphStyle_Comparative = 0;
const int libGHLo_ge_GraphStyle_Differential = 1;
const int libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade = 0;
const int libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade = 1;
const int libGHLo_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade = 2;
const int libGHLo_ge_UpgradeNotificationsSlotStatus_NoUpgrade = 3;
const int libGHLo_ge_WorkersKilledNotificationsSlotStatus_Hidden = 0;
const int libGHLo_ge_WorkersKilledNotificationsSlotStatus_Visible = 1;

// Constants
const int libGHLo_gv_graphsTotalNodes = 100;
const int libGHLo_gv_upgradeNotificationsMaxUISlots = 50;
const fixed libGHLo_gv_upgradeNotificationsVisibleTime = 15.0;
const int libGHLo_gv_workersKilledNotificationsMaxUISlots = 15;
const fixed libGHLo_gv_workersKilledNotificationsVisibleTime = 20.0;

// Structures
struct libGHLo_gs_GraphsGeneral {
    bool lv_active;
    int lv_playerLeft;
    int lv_playerRight;
    int lv_teamLeft;
    int lv_teamRight;
    int lv_currentInterval;
    int lv_totalGraphs;
    int lv_intervals;
    int lv_container;
    int lv_currentNode;
};

struct libGHLo_gs_GraphsData {
    int lv_graph;
    int lv_title;
    string lv_scoreType;
    int lv_style;
    fixed lv_minimumValue;
    fixed lv_rangeBase;
    fixed lv_rangeIncrement;
    int lv_maxValue;
    int[3][7] lv_tempValues;
    int[3] lv_value;
    int lv_team;
};

struct libGHLo_gs_Labels {
    int lv_iconSize;
    int lv_iconSizeEgg;
    int lv_iconSizeTechLab;
    string[17] lv_colorStrings;
};

struct libGHLo_gs_UpgradeNotifications {
    bool lv_active;
    bool lv_updateThreadRunning;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemIcon;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemName;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemPanel;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemProgressBar;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemTimerStatus;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_itemTimerLabel;
    timer[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_timerDestruction;
    int[libGHLo_gv_upgradeNotificationsMaxUISlots + 1] lv_slotStatus;
    unit[101] lv_slotFacility;
    int lv_slotLastUsed;
};

struct libGHLo_gs_WorkersKilledNotifications {
    bool lv_active;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_slotStatus;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_intKilledAmount;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemPanel;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemBackground;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemWorkerColor;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemIcon;
    int[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_itemTimeLabel;
    timer[libGHLo_gv_workersKilledNotificationsMaxUISlots + 1] lv_timerDestruction;
    int lv_slotLastUsed;
};

struct libGHLo_gs_MapNotifications {
    fixed lv_minimumPickupSpacing;
    fixed lv_scannerSweepDuration;
    fixed lv_pingDuration;
    point lv_mostRecentPingLocation;
    timer lv_mostRecentTimer;
};

// Variable Declarations
libGHLo_gs_GraphsGeneral libGHLo_gv_graphsGeneral;
libGHLo_gs_GraphsData[6] libGHLo_gv_graphsData;
playergroup libGHLo_gv_graphsObs;
libGHLo_gs_Labels libGHLo_gv_labels;
playergroup libGHLo_gv_labelsObs;
libGHLo_gs_UpgradeNotifications libGHLo_gv_upgradeNotifications;
playergroup libGHLo_gv_upgradeNotificationsObs;
int libGHLo_gv_upgradeNotificationsObsID;
libGHLo_gs_WorkersKilledNotifications libGHLo_gv_workersKilledNotifications;
playergroup libGHLo_gv_workersKilledNotificationsObs;
libGHLo_gs_MapNotifications libGHLo_gv_mapNotifications;
playergroup libGHLo_gv_mapNotificationObs;

// Function Declarations
void libGHLo_gf_GraphsDefineGraph (int lp_iD, text lp_title, string lp_string, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement);
void libGHLo_gf_GraphsUpdateDataDifferential (int lp_graph);
void libGHLo_gf_GraphsUpdateDataComparative (int lp_graph);
bool libGHLo_gf_LabelsUnitUsesCustomStatusBar (unit lp_unit);
int libGHLo_gf_LabelsUnitIconSize (unit lp_productionUnit);
void libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade (int lp_slot);
int libGHLo_gf_UpgradeNotificationsFacilitySlot (unit lp_facility);
string libGHLo_gf_UpgradeNotificationsUpgradeImage (string lp_upgrade);
text libGHLo_gf_UpgradeNotificationsUpgradeName (string lp_upgrade);
bool libGHLo_gf_UpgradeNotificationsUpgradeNeedsToBeVisible (fixed lp_remainingTime);
void libGHLo_gf_UpgradeNotificationsUpdateThread ();
void libGHLo_gf_UpgradeNotificationsSetStatusLabel (int lp_slot, text lp_status);
void libGHLo_gf_UpgradeNotificationsSetSlotData (int lp_slot, text lp_name, string lp_icon, color lp_color, bool lp_visible);
void libGHLo_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne (int lp_slot);
void libGHLo_gf_UpgradeNotificationsSwapSlotInformation (int lp_slotA, int lp_slotB);
void libGHLo_gf_UpgradeNotificationsUpdateProgressData (int lp_slot);
bool libGHLo_gf_MapNotificationsCheckFullHealth (unit lp_transportunit);

// Trigger Declarations
trigger libGHLo_gt_GameHeartInitialization;
trigger libGHLo_gt_GraphsInitialization;
trigger libGHLo_gt_GraphsTimer;
trigger libGHLo_gt_LabelsInitialization;
trigger libGHLo_gt_LabelsUnitCreated;
trigger libGHLo_gt_LabelsUnitTrainingStarted;
trigger libGHLo_gt_LabelsResearchStarted;
trigger libGHLo_gt_LabelsUnitTrainingStopped;
trigger libGHLo_gt_LabelsResearchStopped;
trigger libGHLo_gt_LabelsReactorDestroyed;
trigger libGHLo_gt_UpgradeNotificationsInitialization;
trigger libGHLo_gt_UpgradeNotificationsResearchCancelled;
trigger libGHLo_gt_UpgradeNotificationsResearchCompleted;
trigger libGHLo_gt_UpgradeNotificationsResearchStarted;
trigger libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut;
trigger libGHLo_gt_WorkersKilledNotificationsInitialization;
trigger libGHLo_gt_WorkersKilledNotificationsWorkerKilled;
trigger libGHLo_gt_WorkersKilledNotificationsTimerRunsOut;
trigger libGHLo_gt_MapNotificationsDrop;
trigger libGHLo_gt_MapNotificationsScannerSweep;

// Library Initialization
void libGHLo_InitVariables ();


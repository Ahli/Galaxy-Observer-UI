include "TriggerLibs/NativeLib"

include "LibGHLo_h"

//--------------------------------------------------------------------------------------------------
// Library: WCS GameHeart
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGHLo_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libGHLo_InitVariables_completed = false;

void libGHLo_InitVariables () {
    int init_i;
    int init_i1;

    if (libGHLo_InitVariables_completed) {
        return;
    }

    libGHLo_InitVariables_completed = true;

    libGHLo_gv_graphsGeneral.lv_intervals = 6;
    libGHLo_gv_graphsGeneral.lv_container = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libGHLo_gv_graphsData[init_i].lv_graph = c_invalidDialogControlId;
        libGHLo_gv_graphsData[init_i].lv_title = c_invalidDialogControlId;
    }
    libGHLo_gv_graphsObs = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    libGHLo_gv_labels.lv_iconSize = 50;
    libGHLo_gv_labels.lv_iconSizeEgg = 35;
    libGHLo_gv_labels.lv_iconSizeTechLab = 45;
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libGHLo_gv_labels.lv_colorStrings[init_i1] = "";
    }
    libGHLo_gv_labelsObs = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemProgressBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_upgradeNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_upgradeNotifications.lv_timerDestruction[init_i1] = TimerCreate();
    }
    libGHLo_gv_upgradeNotifications.lv_slotLastUsed = -1;
    libGHLo_gv_upgradeNotificationsObs = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    libGHLo_gv_upgradeNotificationsObsID = CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny);
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemBackground[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemWorkerColor[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_itemTimeLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGHLo_gv_workersKilledNotificationsMaxUISlots; init_i1 += 1) {
        libGHLo_gv_workersKilledNotifications.lv_timerDestruction[init_i1] = TimerCreate();
    }
    libGHLo_gv_workersKilledNotifications.lv_slotLastUsed = -1;
    libGHLo_gv_workersKilledNotificationsObs = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    libGHLo_gv_mapNotifications.lv_minimumPickupSpacing = 10.0;
    libGHLo_gv_mapNotifications.lv_scannerSweepDuration = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "ScannerSweep", "ExpireDelay", c_playerAny)) / GameGetSpeed());
    libGHLo_gv_mapNotifications.lv_pingDuration = 8.0;
    libGHLo_gv_mapNotifications.lv_mostRecentTimer = TimerCreate();
    libGHLo_gv_mapNotificationObs = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
}

// Presets
// Functions
void libGHLo_gf_GraphsDefineGraph (int lp_iD, text lp_title, string lp_string, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement) {
    int auto236CE7AF_ae;
    int auto236CE7AF_ai;

    // Variable Declarations
    int lv_graph;
    int lv_bar;
    int lv_timeLabel;
    int lv_valueLabel;
    int lv_count;

    // Variable Initialization
    lv_graph = lp_iD;

    // Implementation
    libGHLo_gv_graphsGeneral.lv_totalGraphs += 1;
    libGHLo_gv_graphsData[lv_graph].lv_scoreType = lp_scoreType;
    libGHLo_gv_graphsData[lv_graph].lv_style = lp_style;
    libGHLo_gv_graphsData[lv_graph].lv_minimumValue = lp_minimumValue;
    libGHLo_gv_graphsData[lv_graph].lv_rangeBase = lp_rangeBase;
    libGHLo_gv_graphsData[lv_graph].lv_rangeIncrement = lp_rangeIncrement;
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string));
    if ((libGHLo_gv_graphsGeneral.lv_active == false)) {
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/GraphFrame"));
    libGHLo_gv_graphsData[lv_graph].lv_graph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Title"));
    libGHLo_gv_graphsData[lv_graph].lv_title = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libGHLo_gv_graphsData[lv_graph].lv_title, lp_title, PlayerGroupAll());
    auto236CE7AF_ae = 0;
    auto236CE7AF_ai = 1;
    lv_count = (0 - libGHLo_gv_graphsTotalNodes);
    for ( ; ( (auto236CE7AF_ai >= 0 && lv_count <= auto236CE7AF_ae) || (auto236CE7AF_ai <= 0 && lv_count >= auto236CE7AF_ae) ) ; lv_count += auto236CE7AF_ai ) {
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lv_graph].lv_graph, PlayerGroupAll(), lv_count, 0.0, 1);
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lv_graph].lv_graph, PlayerGroupAll(), lv_count, 0.0, 2);
    }
}

void libGHLo_gf_GraphsUpdateDataDifferential (int lp_graph) {
    int auto826A55D7_ae;
    int auto826A55D7_ai;

    // Variable Declarations
    int lv_bar;
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    int lv_maxValue;
    fixed lv_differential;

    // Variable Initialization

    // Implementation
    auto826A55D7_ae = libGHLo_gv_graphsGeneral.lv_intervals;
    auto826A55D7_ai = 1;
    lv_count = 1;
    for ( ; ( (auto826A55D7_ai >= 0 && lv_count <= auto826A55D7_ae) || (auto826A55D7_ai <= 0 && lv_count >= auto826A55D7_ae) ) ; lv_count += auto826A55D7_ai ) {
        lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft]+libGHLo_gv_graphsData[lp_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight]+libGHLo_gv_graphsData[lp_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft]/libGHLo_gv_graphsGeneral.lv_intervals);
    lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight]/libGHLo_gv_graphsGeneral.lv_intervals);
    lv_difference = ((lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamRight]));
    if ((lv_difference == 0)) {
        libGHLo_gv_graphsData[lp_graph].lv_team = 0;
        libGHLo_gv_graphsData[lp_graph].lv_value[0] = 0;
    }
    else if ((lv_difference > 0)) {
        libGHLo_gv_graphsData[lp_graph].lv_team = libGHLo_gv_graphsGeneral.lv_teamLeft;
        libGHLo_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamRight]);
    }
    else if ((lv_difference < 0)) {
        libGHLo_gv_graphsData[lp_graph].lv_team = libGHLo_gv_graphsGeneral.lv_teamRight;
        libGHLo_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamRight]-lv_teamAverage[libGHLo_gv_graphsGeneral.lv_teamLeft]);
    }
    if ((libGHLo_gv_graphsData[lp_graph].lv_team == libGHLo_gv_graphsGeneral.lv_teamLeft)) {
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsGeneral.lv_currentNode, libGHLo_gv_graphsData[lp_graph].lv_value[0], 1);
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsGeneral.lv_currentNode, (0 - libGHLo_gv_graphsData[lp_graph].lv_value[0]), 2);
    }
    else {
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsGeneral.lv_currentNode, (0 - libGHLo_gv_graphsData[lp_graph].lv_value[0]), 1);
        DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsGeneral.lv_currentNode, libGHLo_gv_graphsData[lp_graph].lv_value[0], 2);
    }
    if ((DialogControlGetMinYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) <= (0.0 - DialogControlGetMaxYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll())))) {
        lv_differential = AbsF(DialogControlGetMinYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()));
    }
    else {
        lv_differential = DialogControlGetMaxYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll());
    }
    if ((lv_differential < libGHLo_gv_graphsData[lp_graph].lv_minimumValue)) {
        lv_differential = libGHLo_gv_graphsData[lp_graph].lv_rangeBase;
    }
    else {
        lv_differential = (lv_differential * 1.15);
        lv_differential = (Ceiling((lv_differential / libGHLo_gv_graphsData[lp_graph].lv_rangeIncrement)) * libGHLo_gv_graphsData[lp_graph].lv_rangeIncrement);
    }
    DialogControlSetMaxYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), lv_differential);
    DialogControlSetMinYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (0.0 - lv_differential));
    DialogControlSetMinXVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (libGHLo_gv_graphsGeneral.lv_currentNode - libGHLo_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsGeneral.lv_currentNode);
}

void libGHLo_gf_GraphsUpdateDataComparative (int lp_graph) {
    int auto2C209F5F_ae;
    int auto2C209F5F_ai;

    // Variable Declarations
    int lv_bar;
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    fixed lv_maxValue;

    // Variable Initialization

    // Implementation
    auto2C209F5F_ae = libGHLo_gv_graphsGeneral.lv_intervals;
    auto2C209F5F_ai = 1;
    lv_count = 1;
    for ( ; ( (auto2C209F5F_ai >= 0 && lv_count <= auto2C209F5F_ae) || (auto2C209F5F_ai <= 0 && lv_count >= auto2C209F5F_ae) ) ; lv_count += auto2C209F5F_ai ) {
        lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft]+libGHLo_gv_graphsData[lp_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight]+libGHLo_gv_graphsData[lp_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    libGHLo_gv_graphsData[lp_graph].lv_value[libGHLo_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamLeft]/libGHLo_gv_graphsGeneral.lv_intervals);
    libGHLo_gv_graphsData[lp_graph].lv_value[libGHLo_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libGHLo_gv_graphsGeneral.lv_teamRight]/libGHLo_gv_graphsGeneral.lv_intervals);
    DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsGeneral.lv_currentNode, libGHLo_gv_graphsData[lp_graph].lv_value[libGHLo_gv_graphsGeneral.lv_teamLeft], 1);
    DialogControlAddDataPoint(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsGeneral.lv_currentNode, libGHLo_gv_graphsData[lp_graph].lv_value[libGHLo_gv_graphsGeneral.lv_teamRight], 2);
    DialogControlSetMinXVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (libGHLo_gv_graphsGeneral.lv_currentNode - libGHLo_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsGeneral.lv_currentNode);
    DialogControlSetMinYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), 0.0);
    if ((DialogControlGetMaxYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) <= libGHLo_gv_graphsData[lp_graph].lv_minimumValue)) {
        DialogControlSetMaxYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libGHLo_gv_graphsData[lp_graph].lv_rangeBase);
    }
    else {
        lv_maxValue = (DialogControlGetMaxYValue(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) * 1.15);
        lv_maxValue = (Ceiling((lv_maxValue / libGHLo_gv_graphsData[lp_graph].lv_rangeIncrement)) * libGHLo_gv_graphsData[lp_graph].lv_rangeIncrement);
        DialogControlSetMaxYVisible(libGHLo_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), lv_maxValue);
    }
}

bool libGHLo_gf_LabelsUnitUsesCustomStatusBar (unit lp_unit) {
    // Variable Declarations
    bool lv_boolean;

    // Variable Initialization

    // Implementation
    if (((UnitGetType(lp_unit) == "CyberneticsCore") || (UnitGetType(lp_unit) == "FleetBeacon") || (UnitGetType(lp_unit) == "Forge") || (UnitGetType(lp_unit) == "Gateway") || (UnitGetType(lp_unit) == "Nexus") || (UnitGetType(lp_unit) == "RoboticsBay") || (UnitGetType(lp_unit) == "RoboticsFacility") || (UnitGetType(lp_unit) == "Stargate") || (UnitGetType(lp_unit) == "TemplarArchive") || (UnitGetType(lp_unit) == "TwilightCouncil") || (UnitGetType(lp_unit) == "Armory") || (UnitGetType(lp_unit) == "Barracks") || (UnitGetType(lp_unit) == "CommandCenter") || (UnitGetType(lp_unit) == "EngineeringBay") || (UnitGetType(lp_unit) == "Factory") || (UnitGetType(lp_unit) == "FusionCore") || (UnitGetType(lp_unit) == "GhostAcademy") || (UnitGetType(lp_unit) == "OrbitalCommand") || (UnitGetType(lp_unit) == "PlanetaryFortress") || (UnitGetType(lp_unit) == "Starport") || (UnitGetType(lp_unit) == "TechLab") || (UnitGetType(lp_unit) == "BarracksTechLab") || (UnitGetType(lp_unit) == "FactoryTechLab") || (UnitGetType(lp_unit) == "StarportTechLab") || (UnitGetType(lp_unit) == "BanelingNest") || (UnitGetType(lp_unit) == "EvolutionChamber") || (UnitGetType(lp_unit) == "LurkerDenMP") || (UnitGetType(lp_unit) == "GreaterSpire") || (UnitGetType(lp_unit) == "Hatchery") || (UnitGetType(lp_unit) == "Hive") || (UnitGetType(lp_unit) == "HydraliskDen") || (UnitGetType(lp_unit) == "InfestationPit") || (UnitGetType(lp_unit) == "Lair") || (UnitGetType(lp_unit) == "RoachWarren") || (UnitGetType(lp_unit) == "SpawningPool") || (UnitGetType(lp_unit) == "Spire") || (UnitGetType(lp_unit) == "UltraliskCavern") || (UnitGetType(lp_unit) == "Egg") || (UnitGetType(lp_unit) == "Larva"))) {
        lv_boolean = true;
    }
    else {
        lv_boolean = false;
    }
    return lv_boolean;
}

int libGHLo_gf_LabelsUnitIconSize (unit lp_productionUnit) {
    // Variable Declarations
    int lv_iconSize;

    // Variable Initialization

    // Implementation
    lv_iconSize = libGHLo_gv_labels.lv_iconSize;
    if (((UnitGetType(lp_productionUnit) == "Egg") || (UnitGetType(lp_productionUnit) == "Larva"))) {
        lv_iconSize = libGHLo_gv_labels.lv_iconSizeEgg;
    }
    else if (((UnitGetType(lp_productionUnit) == "TechLab") || (UnitGetType(lp_productionUnit) == "BarracksTechLab") || (UnitGetType(lp_productionUnit) == "FactoryTechLab") || (UnitGetType(lp_productionUnit) == "StarportTechLab"))) {
        lv_iconSize = libGHLo_gv_labels.lv_iconSizeTechLab;
    }
    return lv_iconSize;
}

void libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade (int lp_slot) {
    int auto85411229_ae;
    int auto85411229_ai;

    // Variable Declarations
    int lv_count;
    string lv_upgrade;
    int lv_sLOT_MAX_INDEX1;

    // Variable Initialization
    lv_sLOT_MAX_INDEX1 = (libGHLo_gv_upgradeNotificationsMaxUISlots + 1);

    // Implementation
    auto85411229_ae = libGHLo_gv_upgradeNotifications.lv_slotLastUsed;
    auto85411229_ai = 1;
    lv_count = (lp_slot + 1);
    for ( ; ( (auto85411229_ai >= 0 && lv_count <= auto85411229_ae) || (auto85411229_ai <= 0 && lv_count >= auto85411229_ae) ) ; lv_count += auto85411229_ai ) {
        if ((lv_count <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
            libGHLo_gf_UpgradeNotificationsSetSlotData((lv_count - 1), libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lv_count], libGHLo_gv_upgradeNotificationsObsID), (libNtve_gf_DialogItemImage(libGHLo_gv_upgradeNotifications.lv_itemIcon[lv_count], libGHLo_gv_upgradeNotificationsObsID)), libNtve_gf_DialogItemColor(libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_count], libGHLo_gv_upgradeNotificationsObsID), DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_count], libGHLo_gv_upgradeNotificationsObsID));
            libGHLo_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)] = libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_count];
            libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[(lv_count - 1)], libNtve_gf_DialogItemValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_count], libGHLo_gv_upgradeNotificationsObsID), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_count], libGHLo_gv_upgradeNotificationsObsID), PlayerGroupAll());
            libGHLo_gv_upgradeNotifications.lv_slotStatus[(lv_count - 1)] = libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count];
            if ((TimerGetElapsed(libGHLo_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)]) <= 0.0)) {
                libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], StringToText(""), PlayerGroupAll());
                DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], PlayerGroupAll(), true);
                DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], PlayerGroupAll(), false);
            }
            else {
                libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], libGHLo_gv_upgradeNotificationsObsID), libGHLo_gv_upgradeNotificationsObs);
            }
        }
        else {
            libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_count], libGHLo_gv_upgradeNotificationsObsID), libGHLo_gv_upgradeNotificationsObs);
            if ((lv_count == lv_sLOT_MAX_INDEX1)) {
                lv_upgrade = libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count], 1, 1);
                libGHLo_gf_UpgradeNotificationsSetSlotData((lv_count - 1), libGHLo_gf_UpgradeNotificationsUpgradeName(lv_upgrade), libGHLo_gf_UpgradeNotificationsUpgradeImage(lv_upgrade), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count]), false)), libGHLo_gf_UpgradeNotificationsUpgradeNeedsToBeVisible(UnitQueueItemTime(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count], c_unitQueueTimeRemaining, 1)));
                libGHLo_gv_upgradeNotifications.lv_slotStatus[(lv_count - 1)] = libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
                libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], StringToText(""), libGHLo_gv_upgradeNotificationsObs);
                DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[(lv_count - 1)], libGHLo_gv_upgradeNotificationsObs, true);
                DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[(lv_count - 1)], libGHLo_gv_upgradeNotificationsObs, false);
                libGHLo_gv_upgradeNotifications.lv_timerDestruction[(lv_count - 1)] = TimerCreate();
            }

        }
        libGHLo_gv_upgradeNotifications.lv_slotFacility[(lv_count - 1)] = libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count];
    }
    libGHLo_gv_upgradeNotifications.lv_slotFacility[libGHLo_gv_upgradeNotifications.lv_slotLastUsed] = null;
    if ((libGHLo_gv_upgradeNotifications.lv_slotLastUsed <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        libGHLo_gf_UpgradeNotificationsSetSlotData(libGHLo_gv_upgradeNotifications.lv_slotLastUsed, StringToText(""), "Assets\\Textures\\black.dds", Color(100.00, 100.00, 100.00), false);
        libGHLo_gv_upgradeNotifications.lv_slotStatus[libGHLo_gv_upgradeNotifications.lv_slotLastUsed] = libGHLo_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
        libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[libGHLo_gv_upgradeNotifications.lv_slotLastUsed], StringToText(""), libGHLo_gv_upgradeNotificationsObs);
        libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[libGHLo_gv_upgradeNotifications.lv_slotLastUsed], 0.0, libGHLo_gv_upgradeNotificationsObs);
        libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[libGHLo_gv_upgradeNotifications.lv_slotLastUsed], StringToText(""), libGHLo_gv_upgradeNotificationsObs);
        libGHLo_gv_upgradeNotifications.lv_timerDestruction[libGHLo_gv_upgradeNotifications.lv_slotLastUsed] = TimerCreate();
    }

    libGHLo_gv_upgradeNotifications.lv_slotLastUsed -= 1;
}

int libGHLo_gf_UpgradeNotificationsFacilitySlot (unit lp_facility) {
    int autoF6314835_ae;
    int autoF6314835_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    autoF6314835_ae = libGHLo_gv_upgradeNotifications.lv_slotLastUsed;
    autoF6314835_ai = 1;
    lv_count = 0;
    for ( ; ( (autoF6314835_ai >= 0 && lv_count <= autoF6314835_ae) || (autoF6314835_ai <= 0 && lv_count >= autoF6314835_ae) ) ; lv_count += autoF6314835_ai ) {
        if ((libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count] == lp_facility) && ((libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade) || (libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade))) {
            return lv_count;
        }

    }
    return -1;
}

string libGHLo_gf_UpgradeNotificationsUpgradeImage (string lp_upgrade) {
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Icon", libGHLo_gv_upgradeNotificationsObsID));
}

text libGHLo_gf_UpgradeNotificationsUpgradeName (string lp_upgrade) {
    string autoCE61EBE2_val;
    string auto4FCB9578_val;

    // Variable Declarations
    string lv_unittype;

    // Variable Initialization

    // Implementation
    autoCE61EBE2_val = lp_upgrade;
    if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_141E0913");
    }
    else if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_701F2322");
    }
    else if (autoCE61EBE2_val == "ProtossGroundWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_E2743571");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_96B69A6D");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_0CBA1085");
    }
    else if (autoCE61EBE2_val == "ProtossGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_31C40A3F");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_C6B716E5");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_E81B983F");
    }
    else if (autoCE61EBE2_val == "ProtossShieldsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_C60B48C7");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_DE31BCE5");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_5AA2CCE9");
    }
    else if (autoCE61EBE2_val == "ProtossAirWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_B8264F5F");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_087849CE");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_9209B1AF");
    }
    else if (autoCE61EBE2_val == "ProtossAirArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_7DDACA58");
    }
    else if (autoCE61EBE2_val == "PsiStormTech") {
        return StringExternal("Param/Value/lib_GHLo_21DF5A4C");
    }
    else if (autoCE61EBE2_val == "haltech") {
        return StringExternal("Param/Value/lib_GHLo_1962231B");
    }
    else if (autoCE61EBE2_val == "BlinkTech") {
        return StringExternal("Param/Value/lib_GHLo_FF134713");
    }
    else if (autoCE61EBE2_val == "WarpGateResearch") {
        return StringExternal("Param/Value/lib_GHLo_66FF4009");
    }
    else if (autoCE61EBE2_val == "CarrierLaunchSpeedUpgrade") {
        return StringExternal("Param/Value/lib_GHLo_0FEE00C3");
    }
    else if (autoCE61EBE2_val == "ExtendedThermalLance") {
        return StringExternal("Param/Value/lib_GHLo_3DC9C957");
    }
    else if (autoCE61EBE2_val == "ObserverGraviticBooster") {
        return StringExternal("Param/Value/lib_GHLo_1CA862CB");
    }
    else if (autoCE61EBE2_val == "GraviticDrive") {
        return StringExternal("Param/Value/lib_GHLo_02FAA83E");
    }
    else if (autoCE61EBE2_val == "Charge") {
        return StringExternal("Param/Value/lib_GHLo_8D6CCD20");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_F4FDF319");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_2A6C4E76");
    }
    else if (autoCE61EBE2_val == "TerranInfantryWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_2A50C857");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_29F77874");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_1F979E83");
    }
    else if (autoCE61EBE2_val == "TerranInfantryArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_9B504B17");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_52112F4B");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_B5F759AB");
    }
    else if (autoCE61EBE2_val == "TerranShipWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_FE6B18DF");
    }
    else if (autoCE61EBE2_val == "TerranShipArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_20A7437D");
    }
    else if (autoCE61EBE2_val == "TerranShipArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_F2858873");
    }
    else if (autoCE61EBE2_val == "TerranShipArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_B0C4FC71");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_BA3355B7");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_98A592CE");
    }
    else if (autoCE61EBE2_val == "TerranVehicleWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_FD235555");
    }
    else if (autoCE61EBE2_val == "TerranVehicleArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_3808F996");
    }
    else if (autoCE61EBE2_val == "TerranVehicleArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_B786F38D");
    }
    else if (autoCE61EBE2_val == "TerranVehicleArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_AAFD0831");
    }
    else if (autoCE61EBE2_val == "BansheeCloak") {
        return StringExternal("Param/Value/lib_GHLo_25348DDA");
    }
    else if (autoCE61EBE2_val == "PersonalCloaking") {
        return StringExternal("Param/Value/lib_GHLo_E15F370F");
    }
    else if (autoCE61EBE2_val == "HighCapacityBarrels") {
        return StringExternal("Param/Value/lib_GHLo_194821E6");
    }
    else if (autoCE61EBE2_val == "PunisherGrenades") {
        return StringExternal("Param/Value/lib_GHLo_BA8B7BF7");
    }
    else if (autoCE61EBE2_val == "HunterSeeker") {
        return StringExternal("Param/Value/lib_GHLo_AE64F24D");
    }
    else if (autoCE61EBE2_val == "SiegeTech") {
        return StringExternal("Param/Value/lib_GHLo_F302BCF7");
    }
    else if (autoCE61EBE2_val == "Stimpack") {
        return StringExternal("Param/Value/lib_GHLo_CD8E3531");
    }
    else if (autoCE61EBE2_val == "BattlecruiserEnableSpecializations") {
        return StringExternal("Param/Value/lib_GHLo_AC52166F");
    }
    else if (autoCE61EBE2_val == "BattlecruiserBehemothReactor") {
        return StringExternal("Param/Value/lib_GHLo_DC405726");
    }
    else if (autoCE61EBE2_val == "NeosteelFrame") {
        return StringExternal("Param/Value/lib_GHLo_81482459");
    }
    else if (autoCE61EBE2_val == "GhostMoebiusReactor") {
        return StringExternal("Param/Value/lib_GHLo_B046590A");
    }
    else if (autoCE61EBE2_val == "HiSecAutoTracking") {
        return StringExternal("Param/Value/lib_GHLo_3B8D503E");
    }
    else if (autoCE61EBE2_val == "ShieldWall") {
        return StringExternal("Param/Value/lib_GHLo_468E9F4E");
    }
    else if (autoCE61EBE2_val == "MedivacCaduceusReactor") {
        return StringExternal("Param/Value/lib_GHLo_9B9ED2B6");
    }
    else if (autoCE61EBE2_val == "RavenCorvidReactor") {
        return StringExternal("Param/Value/lib_GHLo_1D1F0DE0");
    }
    else if (autoCE61EBE2_val == "DurableMaterials") {
        return StringExternal("Param/Value/lib_GHLo_46050353");
    }
    else if (autoCE61EBE2_val == "ReaperSpeed") {
        return StringExternal("Param/Value/lib_GHLo_8B372612");
    }
    else if (autoCE61EBE2_val == "TerranBuildingArmor") {
        return StringExternal("Param/Value/lib_GHLo_F70F87FB");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_034F71BF");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_D985C2E8");
    }
    else if (autoCE61EBE2_val == "ZergMeleeWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_0B7D27AD");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_8F85CCDB");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_878C5739");
    }
    else if (autoCE61EBE2_val == "ZergMissileWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_546C78B1");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_9A47772A");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_304F7AF9");
    }
    else if (autoCE61EBE2_val == "ZergGroundArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_7E847181");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_5243C095");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_4F2FC09D");
    }
    else if (autoCE61EBE2_val == "ZergFlyerWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_8B1D7D0E");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_0C7878FC");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_A9CE0D56");
    }
    else if (autoCE61EBE2_val == "ZergFlyerArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_3726C408");
    }
    else if (autoCE61EBE2_val == "CentrificalHooks") {
        return StringExternal("Param/Value/lib_GHLo_58EFE930");
    }
    else if (autoCE61EBE2_val == "Burrow") {
        return StringExternal("Param/Value/lib_GHLo_5532ADFA");
    }
    else if (autoCE61EBE2_val == "hydraliskspeed") {
        return StringExternal("Param/Value/lib_GHLo_899E3E66");
    }
    else if (autoCE61EBE2_val == "InfestorEnergyUpgrade") {
        return StringExternal("Param/Value/lib_GHLo_D9A2B952");
    }
    else if (autoCE61EBE2_val == "overlordspeed") {
        return StringExternal("Param/Value/lib_GHLo_E89E063F");
    }
    else if (autoCE61EBE2_val == "overlordtransport") {
        return StringExternal("Param/Value/lib_GHLo_0650DD4D");
    }
    else if (autoCE61EBE2_val == "GlialReconstitution") {
        return StringExternal("Param/Value/lib_GHLo_F459DB2F");
    }
    else if (autoCE61EBE2_val == "TunnelingClaws") {
        return StringExternal("Param/Value/lib_GHLo_5E548048");
    }
    else if (autoCE61EBE2_val == "ChitinousPlating") {
        return StringExternal("Param/Value/lib_GHLo_E8B9CA49");
    }
    else if (autoCE61EBE2_val == "zerglingattackspeed") {
        return StringExternal("Param/Value/lib_GHLo_F471A2AB");
    }
    else if (autoCE61EBE2_val == "zerglingmovementspeed") {
        return StringExternal("Param/Value/lib_GHLo_EE405ACD");
    }
    else {
    }
    auto4FCB9578_val = (lp_upgrade);
    if (auto4FCB9578_val == "PhoenixRangeUpgrade") {
        return StringExternal("Param/Value/lib_GHLo_4BFCDF33");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_4D4D6280");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_0DB5DBE7");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipArmorsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_AE1A3D18");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipWeaponsLevel1") {
        return StringExternal("Param/Value/lib_GHLo_E219DB63");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipWeaponsLevel2") {
        return StringExternal("Param/Value/lib_GHLo_1F2C3FE5");
    }
    else if (auto4FCB9578_val == "TerranVehicleAndShipWeaponsLevel3") {
        return StringExternal("Param/Value/lib_GHLo_DDD73466");
    }
    else if (auto4FCB9578_val == "DrillClaws") {
        return StringExternal("Param/Value/lib_GHLo_8971C8C7");
    }
    else if (auto4FCB9578_val == "TransformationServos") {
        return StringExternal("Param/Value/lib_GHLo_D9809947");
    }
    else if (auto4FCB9578_val == "LocustLifetimeIncrease") {
        return StringExternal("Param/Value/lib_GHLo_ACCE65B6");
    }
    else if (auto4FCB9578_val == "NeuralParasite") {
        return StringExternal("Param/Value/lib_GHLo_BA6FB095");
    }
    else {
    }
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Name", libGHLo_gv_upgradeNotificationsObsID));
}

bool libGHLo_gf_UpgradeNotificationsUpgradeNeedsToBeVisible (fixed lp_remainingTime) {
    // Implementation
    if ((lp_remainingTime <= libGHLo_gv_upgradeNotificationsVisibleTime)) {
        return true;
    }

    return false;
}

trigger auto_libGHLo_gf_UpgradeNotificationsUpdateThread_Trigger = null;

void libGHLo_gf_UpgradeNotificationsUpdateThread () {
    if (auto_libGHLo_gf_UpgradeNotificationsUpdateThread_Trigger == null) {
        auto_libGHLo_gf_UpgradeNotificationsUpdateThread_Trigger = TriggerCreate("auto_libGHLo_gf_UpgradeNotificationsUpdateThread_TriggerFunc");
    }

    TriggerExecute(auto_libGHLo_gf_UpgradeNotificationsUpdateThread_Trigger, false, false);
}

bool auto_libGHLo_gf_UpgradeNotificationsUpdateThread_TriggerFunc (bool testConds, bool runActions) {
    int auto520A35AB_ae;
    int auto520A35AB_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    while ((libGHLo_gv_upgradeNotifications.lv_slotLastUsed >= 0)) {
        auto520A35AB_ae = MinI(libGHLo_gv_upgradeNotifications.lv_slotLastUsed, 5);
        auto520A35AB_ai = 1;
        lv_count = 0;
        for ( ; ( (auto520A35AB_ai >= 0 && lv_count <= auto520A35AB_ae) || (auto520A35AB_ai <= 0 && lv_count >= auto520A35AB_ae) ) ; lv_count += auto520A35AB_ai ) {
            if (((lv_count > libGHLo_gv_upgradeNotificationsMaxUISlots) || (libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade)) && (libGHLo_gf_UpgradeNotificationsUpgradeNeedsToBeVisible(UnitQueueItemTime(libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_count], c_unitQueueTimeRemaining, 1)) == true)) {
                if ((lv_count <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
                    DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_count], libGHLo_gv_upgradeNotificationsObs, true);
                    libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] = libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade;
                }

                libGHLo_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne(lv_count);
            }

            if ((libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_VisibleOccupiedwithrunningUpgrade)) {
                libGHLo_gf_UpgradeNotificationsUpdateProgressData(lv_count);
            }

        }
        Wait(0.0625, c_timeGame);
        Wait(0.0, c_timeGame);
    }
    libGHLo_gv_upgradeNotifications.lv_updateThreadRunning = false;
    return true;
}

void libGHLo_gf_UpgradeNotificationsSetStatusLabel (int lp_slot, text lp_status) {
    // Implementation
    DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], libGHLo_gv_upgradeNotificationsObs, false);
    DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], libGHLo_gv_upgradeNotificationsObs, true);
    libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lp_slot], lp_status, libGHLo_gv_upgradeNotificationsObs);
}

void libGHLo_gf_UpgradeNotificationsSetSlotData (int lp_slot, text lp_name, string lp_icon, color lp_color, bool lp_visible) {
    // Implementation
    libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lp_slot], lp_name, libGHLo_gv_upgradeNotificationsObs);
    libNtve_gf_SetDialogItemColor(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slot], lp_color, libGHLo_gv_upgradeNotificationsObs);
    libNtve_gf_SetDialogItemImage(libGHLo_gv_upgradeNotifications.lv_itemIcon[lp_slot], lp_icon, libGHLo_gv_upgradeNotificationsObs);
    DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slot], libGHLo_gv_upgradeNotificationsObs, lp_visible);
}

void libGHLo_gf_UpgradeNotificationsSwapSlotWithLowestInvisibleOne (int lp_slot) {
    int auto7A4B696F_ae;
    int auto7A4B696F_ai;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    auto7A4B696F_ae = (lp_slot - 1);
    auto7A4B696F_ai = 1;
    lv_count = 0;
    for ( ; ( (auto7A4B696F_ai >= 0 && lv_count <= auto7A4B696F_ae) || (auto7A4B696F_ai <= 0 && lv_count >= auto7A4B696F_ae) ) ; lv_count += auto7A4B696F_ai ) {
        if ((libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_count] == libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade)) {
            libGHLo_gf_UpgradeNotificationsSwapSlotInformation(lv_count, lp_slot);
            return ;
        }

    }
}

void libGHLo_gf_UpgradeNotificationsSwapSlotInformation (int lp_slotA, int lp_slotB) {
    int init_i;

    // Variable Declarations
    int[2] lv_status;
    bool[2] lv_visibility;
    text[2] lv_name;
    string[2] lv_icon;
    color[2] lv_color;
    fixed[2] lv_value;
    timer[2] lv_timer;
    unit lv_facility;

    // Variable Initialization
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_status[init_i] = libGHLo_ge_UpgradeNotificationsSlotStatus_NoUpgrade;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_icon[init_i] = "Assets\\Textures\\blank.dds";
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_color[init_i] = Color(100,100,100);
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_timer[init_i] = TimerCreate();
    }

    // Implementation
    if ((lp_slotA <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[0] = libGHLo_gv_upgradeNotifications.lv_slotStatus[lp_slotA];
        lv_visibility[0] = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slotA], libGHLo_gv_upgradeNotificationsObsID);
        lv_name[0] = libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lp_slotA], libGHLo_gv_upgradeNotificationsObsID);
        lv_icon[0] = (libNtve_gf_DialogItemImage(libGHLo_gv_upgradeNotifications.lv_itemIcon[lp_slotA], libGHLo_gv_upgradeNotificationsObsID));
        lv_color[0] = libNtve_gf_DialogItemColor(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slotA], libGHLo_gv_upgradeNotificationsObsID);
        lv_value[0] = libNtve_gf_DialogItemValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], libGHLo_gv_upgradeNotificationsObsID);
        lv_timer[0] = libGHLo_gv_upgradeNotifications.lv_timerDestruction[lp_slotA];
    }

    if ((lp_slotB <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        lv_status[1] = libGHLo_gv_upgradeNotifications.lv_slotStatus[lp_slotB];
        lv_visibility[1] = DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slotB], libGHLo_gv_upgradeNotificationsObsID);
        lv_name[1] = libNtve_gf_DialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lp_slotB], libGHLo_gv_upgradeNotificationsObsID);
        lv_icon[1] = (libNtve_gf_DialogItemImage(libGHLo_gv_upgradeNotifications.lv_itemIcon[lp_slotB], libGHLo_gv_upgradeNotificationsObsID));
        lv_color[1] = libNtve_gf_DialogItemColor(libGHLo_gv_upgradeNotifications.lv_itemPanel[lp_slotB], libGHLo_gv_upgradeNotificationsObsID);
        lv_value[1] = libNtve_gf_DialogItemValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], libGHLo_gv_upgradeNotificationsObsID);
        lv_timer[1] = libGHLo_gv_upgradeNotifications.lv_timerDestruction[lp_slotB];
    }

    if ((lp_slotA <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        libGHLo_gv_upgradeNotifications.lv_slotStatus[lp_slotA] = lv_status[1];
        libGHLo_gf_UpgradeNotificationsSetSlotData(lp_slotA, lv_name[1], lv_icon[1], lv_color[1], lv_visibility[1]);
        libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slotA], lv_value[1], libGHLo_gv_upgradeNotificationsObs);
        libGHLo_gv_upgradeNotifications.lv_timerDestruction[lp_slotA] = lv_timer[1];
    }

    if ((lp_slotB <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        libGHLo_gv_upgradeNotifications.lv_slotStatus[lp_slotB] = lv_status[0];
        libGHLo_gf_UpgradeNotificationsSetSlotData(lp_slotB, lv_name[0], lv_icon[0], lv_color[0], lv_visibility[0]);
        libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slotB], lv_value[0], libGHLo_gv_upgradeNotificationsObs);
        libGHLo_gv_upgradeNotifications.lv_timerDestruction[lp_slotB] = lv_timer[0];
    }

    lv_facility = libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotA];
    libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotA] = libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotB];
    libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slotB] = lv_facility;
}

void libGHLo_gf_UpgradeNotificationsUpdateProgressData (int lp_slot) {
    // Variable Declarations
    fixed lv_remainingTime;
    int lv_remainingSeconds;
    int lv_remainingMilliseconds;
    text lv_extraZero;

    // Variable Initialization
    lv_remainingTime = UnitQueueItemTime(libGHLo_gv_upgradeNotifications.lv_slotFacility[lp_slot], c_unitQueueTimeRemaining, 1);
    lv_remainingSeconds = TruncI(lv_remainingTime);
    lv_remainingMilliseconds = TruncI(((lv_remainingTime - lv_remainingSeconds) * 10.0));

    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lp_slot], (libGHLo_gv_upgradeNotificationsVisibleTime - lv_remainingTime), libGHLo_gv_upgradeNotificationsObs);
    libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lp_slot], (StringExternal("Param/Value/lib_GHLo_9020A51B") + (IntToText(lv_remainingSeconds) + ((StringExternal("Param/Value/lib_GHLo_72F08C05") + StringExternal("Param/Value/lib_GHLo_B79B0450")) + ((StringExternal("Param/Value/lib_GHLo_97A95773") + lv_extraZero) + IntToText(lv_remainingMilliseconds))))), libGHLo_gv_upgradeNotificationsObs);
}

bool libGHLo_gf_MapNotificationsCheckFullHealth (unit lp_transportunit) {
    unitgroup auto2F0AA83D_g;
    int auto2F0AA83D_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    auto2F0AA83D_g = UnitCargoGroup(lp_transportunit);
    auto2F0AA83D_u = 1;
    for ( ; auto2F0AA83D_u <= UnitGroupCount(auto2F0AA83D_g, c_unitCountAll) ; auto2F0AA83D_u += BoolToInt(lv_unit == UnitGroupUnit(auto2F0AA83D_g, auto2F0AA83D_u)) ) {
        lv_unit = UnitGroupUnit(auto2F0AA83D_g, auto2F0AA83D_u);
        if (((UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) != 100.0) || (UnitGetPropertyFixed(lv_unit, c_unitPropShieldsPercent, c_unitPropCurrent) != 100.0))) {
            return false;
        }

    }
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: GameHeart - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_GameHeartInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_observer;
    playergroup lv_observerGroup;

    // Variable Initialization
    lv_observer = CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny);
    lv_observerGroup = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));

    // Actions
    if (!runActions) {
        return true;
    }

    UIUnitColorStyleOverride(lv_observerGroup, c_unitColorStyleNormal);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAllianceOneWay(lv_observer, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_Neutral);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdDefeat, lv_observer, true);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdPassive, lv_observer, true);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdControl, lv_observer, true);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, lv_observer, true);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_GameHeartInitialization_Init () {
    libGHLo_gt_GameHeartInitialization = TriggerCreate("libGHLo_gt_GameHeartInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_GameHeartInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Graphs - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_GraphsInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerfromTeam1;
    int lv_playerfromTeam2;

    // Variable Initialization
    lv_playerfromTeam1 = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
    lv_playerfromTeam2 = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(PlayerGroupActive()) == 2) && (PlayerGroupCount(GameAttributePlayersForTeam(1)) == 1) && (PlayerGroupCount(GameAttributePlayersForTeam(2)) == 1)) {
        libGHLo_gv_graphsGeneral.lv_active = true;
    }
    else {
        TriggerEnable(libGHLo_gt_GraphsTimer, false);
    }
    if ((libGHLo_gv_graphsGeneral.lv_active == true)) {
        if ((PointGetX(PlayerStartLocation(PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1))) < PointGetX(PlayerStartLocation(PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1))))) {
            libGHLo_gv_graphsGeneral.lv_playerLeft = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
            libGHLo_gv_graphsGeneral.lv_teamLeft = 1;
            libGHLo_gv_graphsGeneral.lv_playerRight = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
            libGHLo_gv_graphsGeneral.lv_teamRight = 2;
        }
        else if ((PointGetX(PlayerStartLocation(PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1))) > PointGetX(PlayerStartLocation(PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1))))) {
            libGHLo_gv_graphsGeneral.lv_playerLeft = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
            libGHLo_gv_graphsGeneral.lv_teamLeft = 2;
            libGHLo_gv_graphsGeneral.lv_playerRight = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
            libGHLo_gv_graphsGeneral.lv_teamRight = 1;
        }
        else if ((PointGetX(PlayerStartLocation(PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1))) == PointGetX(PlayerStartLocation(PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1)))) && (lv_playerfromTeam1 < lv_playerfromTeam2)) {
            libGHLo_gv_graphsGeneral.lv_playerLeft = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
            libGHLo_gv_graphsGeneral.lv_teamLeft = 1;
            libGHLo_gv_graphsGeneral.lv_playerRight = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
            libGHLo_gv_graphsGeneral.lv_teamRight = 2;
        }
        else if ((PointGetX(PlayerStartLocation(PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1))) == PointGetX(PlayerStartLocation(PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1)))) && (lv_playerfromTeam1 > lv_playerfromTeam2)) {
            libGHLo_gv_graphsGeneral.lv_playerLeft = PlayerGroupPlayer(GameAttributePlayersForTeam(2), 1);
            libGHLo_gv_graphsGeneral.lv_teamLeft = 2;
            libGHLo_gv_graphsGeneral.lv_playerRight = PlayerGroupPlayer(GameAttributePlayersForTeam(1), 1);
            libGHLo_gv_graphsGeneral.lv_teamRight = 1;
        }
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GraphContainer");
    libGHLo_gv_graphsGeneral.lv_container = DialogControlLastCreated();
    libGHLo_gf_GraphsDefineGraph(1, StringExternal("Param/Value/lib_GHLo_8058A929"), "IncomeGraph", "ResourceCollectionRate", libGHLo_ge_GraphStyle_Differential, 350.0, 400.0, 200.0);
    libGHLo_gf_GraphsDefineGraph(2, StringExternal("Param/Value/lib_GHLo_31D21183"), "ArmySizeGraph", "FoodUsedArmy", libGHLo_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_GraphsInitialization_Init () {
    libGHLo_gt_GraphsInitialization = TriggerCreate("libGHLo_gt_GraphsInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_GraphsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Graphs - Timer
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_GraphsTimer_Func (bool testConds, bool runActions) {
    int auto2CE2B256_ae;
    int auto2CE2B256_ai;
    int auto117DB1DE_val;
    int auto6CD4D55A_ae;
    int auto6CD4D55A_ai;

    // Variable Declarations
    int lv_bar;
    int lv_graph;
    int lv_count;
    int lv_count2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGHLo_gv_graphsGeneral.lv_currentInterval += 1;
    if ((libGHLo_gv_graphsGeneral.lv_currentInterval == libGHLo_gv_graphsGeneral.lv_intervals)) {
        libGHLo_gv_graphsGeneral.lv_currentNode += 1;
    }

    auto2CE2B256_ae = libGHLo_gv_graphsGeneral.lv_totalGraphs;
    auto2CE2B256_ai = 1;
    lv_graph = 1;
    for ( ; ( (auto2CE2B256_ai >= 0 && lv_graph <= auto2CE2B256_ae) || (auto2CE2B256_ai <= 0 && lv_graph >= auto2CE2B256_ae) ) ; lv_graph += auto2CE2B256_ai ) {
        libGHLo_gv_graphsData[lv_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamLeft][libGHLo_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libGHLo_gv_graphsGeneral.lv_playerLeft, libGHLo_gv_graphsData[lv_graph].lv_scoreType);
        libGHLo_gv_graphsData[lv_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamRight][libGHLo_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libGHLo_gv_graphsGeneral.lv_playerRight, libGHLo_gv_graphsData[lv_graph].lv_scoreType);
        if ((libGHLo_gv_graphsGeneral.lv_currentInterval == libGHLo_gv_graphsGeneral.lv_intervals)) {
            auto117DB1DE_val = libGHLo_gv_graphsData[lv_graph].lv_style;
            if (auto117DB1DE_val == libGHLo_ge_GraphStyle_Comparative) {
                libGHLo_gf_GraphsUpdateDataComparative(lv_graph);
            }
            else if (auto117DB1DE_val == libGHLo_ge_GraphStyle_Differential) {
                libGHLo_gf_GraphsUpdateDataDifferential(lv_graph);
            }
            else {
            }
            auto6CD4D55A_ae = libGHLo_gv_graphsGeneral.lv_intervals;
            auto6CD4D55A_ai = 1;
            lv_count = 1;
            for ( ; ( (auto6CD4D55A_ai >= 0 && lv_count <= auto6CD4D55A_ae) || (auto6CD4D55A_ai <= 0 && lv_count >= auto6CD4D55A_ae) ) ; lv_count += auto6CD4D55A_ai ) {
                libGHLo_gv_graphsData[lv_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamLeft][lv_count] = 0;
                libGHLo_gv_graphsData[lv_graph].lv_tempValues[libGHLo_gv_graphsGeneral.lv_teamRight][lv_count] = 0;
            }
        }

    }
    if ((libGHLo_gv_graphsGeneral.lv_currentInterval == libGHLo_gv_graphsGeneral.lv_intervals)) {
        libGHLo_gv_graphsGeneral.lv_currentInterval = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_GraphsTimer_Init () {
    libGHLo_gt_GraphsTimer = TriggerCreate("libGHLo_gt_GraphsTimer_Func");
    TriggerAddEventTimePeriodic(libGHLo_gt_GraphsTimer, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 0)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "white";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 1)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "red";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 2)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "blue";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 3)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "teal";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 4)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "purple";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 5)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "yellow";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 6)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "orange";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 7)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "green";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 8)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "lightpink";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 9)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "violet";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 10)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "lightgrey";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 11)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "darkgreen";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 12)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "brown";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 13)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "lightgreen";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 14)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "darkgrey";
        }
        else if ((PlayerGetColorIndex(PlayerGroupLoopCurrent(), false) == 15)) {
            libGHLo_gv_labels.lv_colorStrings[PlayerGroupLoopCurrent()] = "pink";
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsInitialization_Init () {
    libGHLo_gt_LabelsInitialization = TriggerCreate("libGHLo_gt_LabelsInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_LabelsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Created
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_size;
    int lv_bGSize;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_size = libGHLo_gf_LabelsUnitIconSize(lv_unit);
    lv_bGSize = FixedToInt((lv_size * 1.2));

    // Conditions
    if (testConds) {
        if (!((libGHLo_gf_LabelsUnitUsesCustomStatusBar(EventUnitCreatedUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetString(true, (IntToString(UnitGetTag(lv_unit)) + "-slot1"), "");
    DataTableSetString(true, (IntToString(UnitGetTag(lv_unit)) + "-slot2"), "");
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\IconBG", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (("color_accents\\gh-btn-" + libGHLo_gv_labels.lv_colorStrings[UnitGetOwner(lv_unit)] + ".dds")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG1-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\IconBG", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (("color_accents\\gh-btn-" + libGHLo_gv_labels.lv_colorStrings[UnitGetOwner(lv_unit)] + ".dds")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG2-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\IconBG", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (("color_accents\\gh-btn-" + libGHLo_gv_labels.lv_colorStrings[UnitGetOwner(lv_unit)] + ".dds")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_bGSize, lv_bGSize);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("IconBG3-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon1\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon1-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    if ((UnitGetType(lv_unit) == "Larva")) {
        DialogControlSetPosition(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(UnitGetTag(lv_unit)))), PlayerGroupAll(), c_anchorTopLeft, FixedToInt((((libGHLo_gv_labels.lv_iconSizeEgg * 1.2) / 6.0) / 2.0)), FixedToInt((((libGHLo_gv_labels.lv_iconSizeEgg * 1.2) / 6.0) / 2.0)));
    }

    if (((UnitGetType(lv_unit) == "TechLab") || (UnitGetType(lv_unit) == "BarracksTechLab") || (UnitGetType(lv_unit) == "FactoryTechLab") || (UnitGetType(lv_unit) == "StarportTechLab"))) {
        DialogControlSetPosition(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(UnitGetTag(lv_unit)))), PlayerGroupAll(), c_anchorTopLeft, FixedToInt((((libGHLo_gv_labels.lv_iconSizeTechLab * 1.2) / 6.0) / 2.0)), FixedToInt((((libGHLo_gv_labels.lv_iconSizeTechLab * 1.2) / 6.0) / 2.0)));
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon2\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon2-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StatusIcon3\\Icon", lv_unit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_size, lv_size);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("Icon3-" + IntToString(UnitGetTag(lv_unit))), DialogControlLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsUnitCreated_Init () {
    libGHLo_gt_LabelsUnitCreated = TriggerCreate("libGHLo_gt_LabelsUnitCreated_Func");
    TriggerAddEventUnitCreated(libGHLo_gt_LabelsUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Training Started
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsUnitTrainingStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    unit lv_trainee;
    string lv_traineeType;
    int lv_iconSize;
    int lv_activeTags;
    playergroup lv_obsGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_trainee = EventUnitProgressUnit();
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();
    lv_iconSize = libGHLo_gf_LabelsUnitIconSize(lv_unit);
    lv_obsGroup = libGHLo_gv_labelsObs;

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("GameHeartSettings", "Labels (Units)", "Value", 1) == 1))) {
            return false;
        }

        if (!((lv_traineeType != "Baneling"))) {
            return false;
        }

        if (!((lv_traineeType != "Interceptor"))) {
            return false;
        }

        if (!((lv_traineeType != "BroodlingEscort"))) {
            return false;
        }

        if (!((lv_traineeType != "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == "")) {
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), (lv_traineeType));
        if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == "")) {
            lv_activeTags = 1;
        }
        else {
            lv_activeTags = 2;
        }
    }
    else {
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), (lv_traineeType));
        lv_activeTags = 2;
    }
    if ((lv_traineeType != "Zergling") && (lv_activeTags == 2)) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_obsGroup, true);
    }
    else {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsUnitTrainingStarted_Init () {
    libGHLo_gt_LabelsUnitTrainingStarted = TriggerCreate("libGHLo_gt_LabelsUnitTrainingStarted_Func");
    TriggerAddEventUnitTrainProgress(libGHLo_gt_LabelsUnitTrainingStarted, null, c_unitProgressStageStart);
    TriggerAddEventUnitArmMagazineProgress(libGHLo_gt_LabelsUnitTrainingStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Research Started
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTag;
    string lv_research;
    playergroup lv_obsGroup;

    // Variable Initialization
    lv_unitTag = UnitGetTag(EventUnit());
    lv_research = libNtve_gf_TriggeringProgressUpgrade();
    lv_obsGroup = libGHLo_gv_labelsObs;

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("GameHeartSettings", "Labels (Research)", "Value", 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
    libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_research, "Icon", c_playerAny)), PlayerGroupAll());
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsResearchStarted_Init () {
    libGHLo_gt_LabelsResearchStarted = TriggerCreate("libGHLo_gt_LabelsResearchStarted_Func");
    TriggerAddEventUnitResearchProgress(libGHLo_gt_LabelsResearchStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Unit Training Stopped
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsUnitTrainingStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_unitTag;
    unit lv_trainee;
    string lv_traineeType;
    playergroup lv_obsGroup;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_trainee = EventUnitProgressUnit();
    lv_traineeType = libNtve_gf_TriggeringProgressUnitType();
    lv_obsGroup = libGHLo_gv_labelsObs;

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("GameHeartSettings", "Labels (Units)", "Value", 1) == 1))) {
            return false;
        }

        if (!((lv_traineeType != "Baneling"))) {
            return false;
        }

        if (!((lv_traineeType != "Interceptor"))) {
            return false;
        }

        if (!((lv_traineeType != "BroodlingEscort"))) {
            return false;
        }

        if (!((lv_traineeType != "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
    if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) != "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot1"), DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")));
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    else if ((DataTableGetString(true, (IntToString(lv_unitTag) + "-slot2")) == (lv_traineeType)) && (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1")) != "")) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
        libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        DataTableSetString(true, (IntToString(lv_unitTag) + "-slot2"), "");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsUnitTrainingStopped_Init () {
    libGHLo_gt_LabelsUnitTrainingStopped = TriggerCreate("libGHLo_gt_LabelsUnitTrainingStopped_Func");
    TriggerAddEventUnitTrainProgress(libGHLo_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(libGHLo_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageCancel);
    TriggerAddEventUnitArmMagazineProgress(libGHLo_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageComplete);
    TriggerAddEventUnitArmMagazineProgress(libGHLo_gt_LabelsUnitTrainingStopped, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Research Stopped
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsResearchStopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_unitTag;
    playergroup lv_obsGroup;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_unitTag = UnitGetTag(lv_unit);
    lv_obsGroup = libGHLo_gv_labelsObs;

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("GameHeartSettings", "Labels (Research)", "Value", 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
    DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsResearchStopped_Init () {
    libGHLo_gt_LabelsResearchStopped = TriggerCreate("libGHLo_gt_LabelsResearchStopped_Func");
    TriggerAddEventUnitResearchProgress(libGHLo_gt_LabelsResearchStopped, null, c_unitProgressStageCancel);
    TriggerAddEventUnitResearchProgress(libGHLo_gt_LabelsResearchStopped, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Labels - Reactor Destroyed
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_LabelsReactorDestroyed_Func (bool testConds, bool runActions) {
    unitgroup auto00CB1734_g;
    int auto00CB1734_u;

    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    int lv_unitTag;
    playergroup lv_obsGroup;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);
    lv_unitTag = UnitGetTag(lv_unit);
    lv_obsGroup = libGHLo_gv_labelsObs;

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("GameHeartSettings", "Labels (Units)", "Value", 1) == 1))) {
            return false;
        }

        if (!(((lv_unitType == "BarracksReactor") || (lv_unitType == "FactoryReactor") || (lv_unitType == "StarportReactor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto00CB1734_g = UnitGroup(null, EventPlayer(), RegionCircle(PointWithOffset(UnitGetPosition(EventUnit()), -2.5, 0.5), 0.1), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    auto00CB1734_u = 1;
    for ( ; auto00CB1734_u <= UnitGroupCount(auto00CB1734_g, c_unitCountAll) ; auto00CB1734_u += BoolToInt(lv_unit == UnitGroupUnit(auto00CB1734_g, auto00CB1734_u)) ) {
        lv_unit = UnitGroupUnit(auto00CB1734_g, auto00CB1734_u);
        lv_unitType = UnitGetType(lv_unit);
        if (((lv_unitType == "Barracks") || (lv_unitType == "Factory") || (lv_unitType == "Starport")) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_unit, 1, 1) != "")) {
            lv_unitTag = UnitGetTag(lv_unit);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon2-" + IntToString(lv_unitTag))), lv_obsGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon3-" + IntToString(lv_unitTag))), lv_obsGroup, false);
            libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), (CatalogFieldValueGet(c_gameCatalogActor, (DataTableGetString(true, (IntToString(lv_unitTag) + "-slot1"))), "UnitIcon", c_playerAny)), PlayerGroupAll());
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("IconBG1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
            DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, ("Icon1-" + IntToString(lv_unitTag))), lv_obsGroup, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_LabelsReactorDestroyed_Init () {
    libGHLo_gt_LabelsReactorDestroyed = TriggerCreate("libGHLo_gt_LabelsReactorDestroyed_Func");
    TriggerAddEventUnitDied(libGHLo_gt_LabelsReactorDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsInitialization_Func (bool testConds, bool runActions) {
    int auto69B01FF3_ae;
    int auto69B01FF3_ai;

    // Variable Declarations
    int lv_slot;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("GameHeartSettings", "Notifications (Upgrades)", "Value", 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(PlayerGroupActive()) == 2)) {
        libGHLo_gv_upgradeNotifications.lv_active = true;
        auto69B01FF3_ae = libGHLo_gv_upgradeNotificationsMaxUISlots;
        auto69B01FF3_ai = 1;
        lv_slot = 0;
        for ( ; ( (auto69B01FF3_ai >= 0 && lv_slot <= auto69B01FF3_ae) || (auto69B01FF3_ai <= 0 && lv_slot >= auto69B01FF3_ae) ) ; lv_slot += auto69B01FF3_ai ) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + IntToString(lv_slot)));
            libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerStatus")));
            libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerBar")));
            libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerCountdown")));
            libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerIcon")));
            libGHLo_gv_upgradeNotifications.lv_itemIcon[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TimerNotificationPanel/ToggledContent/TimerFrame" + (IntToString(lv_slot) + "/TimerWindow/TimerType")));
            libGHLo_gv_upgradeNotifications.lv_itemName[lv_slot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_upgradeNotificationsObs, true);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libNtve_gf_SetDialogItemMaximumValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], libGHLo_gv_upgradeNotificationsVisibleTime, libGHLo_gv_upgradeNotificationsObs);
            libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot], StringToText(""), libGHLo_gv_upgradeNotificationsObs);
            libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemName[lv_slot], StringToText(""), libGHLo_gv_upgradeNotificationsObs);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", libGHLo_gv_upgradeNotificationsObs);
            libNtve_gf_SetDialogItemColor(libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_slot], Color(100,100,100), libGHLo_gv_upgradeNotificationsObs);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsInitialization_Init () {
    libGHLo_gt_UpgradeNotificationsInitialization = TriggerCreate("libGHLo_gt_UpgradeNotificationsInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_UpgradeNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Cancelled
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsResearchCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libGHLo_gf_UpgradeNotificationsFacilitySlot(lv_facility);

    // Conditions
    if (testConds) {
        if (!((libGHLo_gv_upgradeNotifications.lv_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_slot <= libGHLo_gv_upgradeNotificationsMaxUISlots) && (DialogControlIsVisible(libGHLo_gv_upgradeNotifications.lv_itemPanel[lv_slot], libGHLo_gv_upgradeNotificationsObsID) == true)) {
        libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
        TimerStart(libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_slot], 5.0, false, c_timeGame);
        if ((UnitIsAlive(lv_facility) == false)) {
            libGHLo_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_GHLo_9266D633"));
        }
        else {
            libGHLo_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_GHLo_DFAF5FF3"));
        }
    }
    else {
        libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade(libGHLo_gf_UpgradeNotificationsFacilitySlot(lv_facility));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsResearchCancelled_Init () {
    libGHLo_gt_UpgradeNotificationsResearchCancelled = TriggerCreate("libGHLo_gt_UpgradeNotificationsResearchCancelled_Func");
    TriggerAddEventUnitResearchProgress(libGHLo_gt_UpgradeNotificationsResearchCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Completed
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsResearchCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_facility;
    int lv_slot;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_slot = libGHLo_gf_UpgradeNotificationsFacilitySlot(lv_facility);

    // Conditions
    if (testConds) {
        if (!((libGHLo_gv_upgradeNotifications.lv_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_slot <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_UpgradeNotificationsSlotStatus_OccupiedwithdestroyedcompletedUpgrade;
        libGHLo_gf_UpgradeNotificationsSetStatusLabel(lv_slot, StringExternal("Param/Value/lib_GHLo_76FE8CD8"));
        libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], libGHLo_gv_upgradeNotificationsVisibleTime, libGHLo_gv_upgradeNotificationsObs);
        TimerStart(libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_slot], 5.0, false, c_timeGame);
    }
    else {
        libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade(libGHLo_gf_UpgradeNotificationsFacilitySlot(lv_facility));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsResearchCompleted_Init () {
    libGHLo_gt_UpgradeNotificationsResearchCompleted = TriggerCreate("libGHLo_gt_UpgradeNotificationsResearchCompleted_Func");
    TriggerAddEventUnitResearchProgress(libGHLo_gt_UpgradeNotificationsResearchCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Research Started
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsResearchStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    unit lv_facility;
    string lv_upgrade;

    // Variable Initialization
    lv_facility = EventUnit();
    lv_upgrade = libNtve_gf_TriggeringProgressUpgrade();

    // Conditions
    if (testConds) {
        if (!((libGHLo_gv_upgradeNotifications.lv_active == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGHLo_gv_upgradeNotifications.lv_slotLastUsed += 1;
    lv_slot = libGHLo_gv_upgradeNotifications.lv_slotLastUsed;
    libGHLo_gv_upgradeNotifications.lv_slotFacility[lv_slot] = lv_facility;
    if ((lv_slot <= libGHLo_gv_upgradeNotificationsMaxUISlots)) {
        libGHLo_gf_UpgradeNotificationsSetSlotData(lv_slot, libGHLo_gf_UpgradeNotificationsUpgradeName(lv_upgrade), libGHLo_gf_UpgradeNotificationsUpgradeImage(lv_upgrade), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_facility), false)), false);
        if ((libGHLo_gv_upgradeNotifications.lv_updateThreadRunning == false)) {
            libGHLo_gv_upgradeNotifications.lv_updateThreadRunning = true;
            libGHLo_gf_UpgradeNotificationsUpdateThread();
        }

        libNtve_gf_SetDialogItemText(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], StringToText(""), libGHLo_gv_upgradeNotificationsObs);
        DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerLabel[lv_slot], libGHLo_gv_upgradeNotificationsObs, true);
        DialogControlSetVisible(libGHLo_gv_upgradeNotifications.lv_itemTimerStatus[lv_slot], libGHLo_gv_upgradeNotificationsObs, false);
        libGHLo_gv_upgradeNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_UpgradeNotificationsSlotStatus_HiddenOccupiedwithrunningUpgrade;
        libNtve_gf_SetDialogItemCurrentValue(libGHLo_gv_upgradeNotifications.lv_itemProgressBar[lv_slot], 0.0, libGHLo_gv_upgradeNotificationsObs);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsResearchStarted_Init () {
    libGHLo_gt_UpgradeNotificationsResearchStarted = TriggerCreate("libGHLo_gt_UpgradeNotificationsResearchStarted_Func");
    TriggerAddEventUnitResearchProgress(libGHLo_gt_UpgradeNotificationsResearchStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Notifications - Destruction Timer Runs Out
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut_Func (bool testConds, bool runActions) {
    int autoB0493DF3_ae;
    int autoB0493DF3_ai;

    // Variable Declarations
    int lv_slot;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGHLo_gv_upgradeNotifications.lv_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB0493DF3_ae = libGHLo_gv_upgradeNotificationsMaxUISlots;
    autoB0493DF3_ai = 1;
    lv_slot = 0;
    for ( ; ( (autoB0493DF3_ai >= 0 && lv_slot <= autoB0493DF3_ae) || (autoB0493DF3_ai <= 0 && lv_slot >= autoB0493DF3_ae) ) ; lv_slot += autoB0493DF3_ai ) {
        if ((EventTimer() == libGHLo_gv_upgradeNotifications.lv_timerDestruction[lv_slot])) {
            libGHLo_gf_UpgradeNotificationsRemoveRunningUpgrade(lv_slot);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut_Init () {
    libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut = TriggerCreate("libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut_Func");
    TriggerAddEventTimer(libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_WorkersKilledNotificationsInitialization_Func (bool testConds, bool runActions) {
    int init_i;

    int autoE2BFA55A_ae;
    int autoE2BFA55A_ai;

    // Variable Declarations
    int lv_slot;
    int lv_count;
    int[4] lv_panel;
    int[4] lv_timeLabel;
    int[4] lv_icon;
    int[4] lv_workerColor;
    int[4] lv_background;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_panel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_timeLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_icon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_workerColor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_background[init_i] = c_invalidDialogControlId;
    }

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("GameHeartSettings", "Notifications (Workers Killed)", "Value", 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE2BFA55A_ae = 3;
    autoE2BFA55A_ai = 1;
    lv_slot = 0;
    for ( ; ( (autoE2BFA55A_ai >= 0 && lv_slot <= autoE2BFA55A_ae) || (autoE2BFA55A_ai <= 0 && lv_slot >= autoE2BFA55A_ae) ) ; lv_slot += autoE2BFA55A_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + IntToString(lv_slot)));
        lv_panel[lv_slot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (IntToString(lv_slot) + "/WorkerCount")));
        lv_timeLabel[lv_slot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_workersKilledNotificationsObs, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (IntToString(lv_slot) + "/WorkerType")));
        lv_icon[lv_slot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_workersKilledNotificationsObs, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (IntToString(lv_slot) + "/WorkerColor")));
        lv_workerColor[lv_slot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_workersKilledNotificationsObs, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/WorkerNotificationPanel/ToggledContent/WorkerFrame" + (IntToString(lv_slot) + "/WorkerBackground")));
        lv_background[lv_slot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGHLo_gv_workersKilledNotificationsObs, true);
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        libNtve_gf_SetDialogItemText(lv_timeLabel[lv_slot], StringToText(""), libGHLo_gv_workersKilledNotificationsObs);
        libNtve_gf_SetDialogItemColor(lv_panel[lv_slot], Color(100,100,100), libGHLo_gv_workersKilledNotificationsObs);
    }
    if ((PlayerGroupCount(PlayerGroupActive()) == 2)) {
        libGHLo_gv_workersKilledNotifications.lv_active = true;
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libGHLo_gv_workersKilledNotifications.lv_itemPanel[PlayerGroupLoopCurrent()] = lv_panel[lv_count];
            libGHLo_gv_workersKilledNotifications.lv_itemTimeLabel[PlayerGroupLoopCurrent()] = lv_timeLabel[lv_count];
            libGHLo_gv_workersKilledNotifications.lv_itemIcon[PlayerGroupLoopCurrent()] = lv_icon[lv_count];
            libGHLo_gv_workersKilledNotifications.lv_itemWorkerColor[PlayerGroupLoopCurrent()] = lv_workerColor[lv_count];
            libGHLo_gv_workersKilledNotifications.lv_itemBackground[PlayerGroupLoopCurrent()] = lv_background[lv_count];
            lv_count += 1;
        }
        PlayerGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_WorkersKilledNotificationsInitialization_Init () {
    libGHLo_gt_WorkersKilledNotificationsInitialization = TriggerCreate("libGHLo_gt_WorkersKilledNotificationsInitialization_Func");
    TriggerAddEventMapInit(libGHLo_gt_WorkersKilledNotificationsInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Worker Killed
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_WorkersKilledNotificationsWorkerKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_triggeringUnit;
    unit lv_killingUnit;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_triggeringUnit = EventUnit();
    lv_killingUnit = libNtve_gf_KillingUnit();

    // Conditions
    if (testConds) {
        if (!((libGHLo_gv_workersKilledNotifications.lv_active == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTestState(EventUnit(), c_unitStateHallucination) == false) && ((UnitGetType(EventUnit()) == "Probe") || (UnitGetType(EventUnit()) == "Drone") || (UnitGetType(EventUnit()) == "DroneBurrowed") || (UnitGetType(EventUnit()) == "SCV")))) {
        if ((libGHLo_gv_workersKilledNotifications.lv_slotStatus[lv_player] == libGHLo_ge_WorkersKilledNotificationsSlotStatus_Visible)) {
            libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_player] = (libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_player] + 1);
            libNtve_gf_SetDialogItemText(libGHLo_gv_workersKilledNotifications.lv_itemTimeLabel[lv_player], (StringExternal("Param/Value/lib_GHLo_820A721C") + (IntToText(libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_player]) + StringExternal("Param/Value/lib_GHLo_8818296C"))), libGHLo_gv_workersKilledNotificationsObs);
        }
        else {
            libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_player] = 1;
            libNtve_gf_SetDialogItemText(libGHLo_gv_workersKilledNotifications.lv_itemTimeLabel[lv_player], (StringExternal("Param/Value/lib_GHLo_2B160C29") + (IntToText(libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_player]) + StringExternal("Param/Value/lib_GHLo_E6F62A49"))), libGHLo_gv_workersKilledNotificationsObs);
        }
        libNtve_gf_SetDialogItemImage(libGHLo_gv_workersKilledNotifications.lv_itemIcon[lv_player], (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_triggeringUnit), "UnitIcon", c_playerAny)), libGHLo_gv_workersKilledNotificationsObs);
        libNtve_gf_SetDialogItemColor(libGHLo_gv_workersKilledNotifications.lv_itemBackground[lv_player], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_killingUnit), false)), libGHLo_gv_workersKilledNotificationsObs);
        libNtve_gf_SetDialogItemColor(libGHLo_gv_workersKilledNotifications.lv_itemWorkerColor[lv_player], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_triggeringUnit), false)), libGHLo_gv_workersKilledNotificationsObs);
        libGHLo_gv_workersKilledNotifications.lv_slotStatus[lv_player] = libGHLo_ge_WorkersKilledNotificationsSlotStatus_Visible;
        if ((libGHLo_gv_workersKilledNotifications.lv_intKilledAmount[lv_player] > 1)) {
            DialogControlSetVisible(libGHLo_gv_workersKilledNotifications.lv_itemPanel[lv_player], libGHLo_gv_workersKilledNotificationsObs, true);
        }

        TimerStart(libGHLo_gv_workersKilledNotifications.lv_timerDestruction[lv_player], libGHLo_gv_workersKilledNotificationsVisibleTime, false, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_WorkersKilledNotificationsWorkerKilled_Init () {
    libGHLo_gt_WorkersKilledNotificationsWorkerKilled = TriggerCreate("libGHLo_gt_WorkersKilledNotificationsWorkerKilled_Func");
    TriggerAddEventUnitDied(libGHLo_gt_WorkersKilledNotificationsWorkerKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Workers Killed Notifications - Timer Runs Out
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_WorkersKilledNotificationsTimerRunsOut_Func (bool testConds, bool runActions) {
    int autoA8D51FBB_ae;
    int autoA8D51FBB_ai;

    // Variable Declarations
    int lv_slot;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGHLo_gv_workersKilledNotifications.lv_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA8D51FBB_ae = libGHLo_gv_workersKilledNotificationsMaxUISlots;
    autoA8D51FBB_ai = 1;
    lv_slot = 0;
    for ( ; ( (autoA8D51FBB_ai >= 0 && lv_slot <= autoA8D51FBB_ae) || (autoA8D51FBB_ai <= 0 && lv_slot >= autoA8D51FBB_ae) ) ; lv_slot += autoA8D51FBB_ai ) {
        if ((EventTimer() == libGHLo_gv_workersKilledNotifications.lv_timerDestruction[lv_slot])) {
            libGHLo_gv_workersKilledNotifications.lv_slotStatus[lv_slot] = libGHLo_ge_WorkersKilledNotificationsSlotStatus_Hidden;
            DialogControlSetVisible(libGHLo_gv_workersKilledNotifications.lv_itemPanel[lv_slot], PlayerGroupAll(), false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_WorkersKilledNotificationsTimerRunsOut_Init () {
    libGHLo_gt_WorkersKilledNotificationsTimerRunsOut = TriggerCreate("libGHLo_gt_WorkersKilledNotificationsTimerRunsOut_Func");
    TriggerAddEventTimer(libGHLo_gt_WorkersKilledNotificationsTimerRunsOut, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Notifications - Drop
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_MapNotificationsDrop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false) && (libGHLo_gf_MapNotificationsCheckFullHealth(EventUnit()) == true) && (UnitCargoValue(EventUnit(), c_unitCargoSpaceUsed) == UnitCargoValue(EventUnit(), c_unitCargoSpaceTotal)) && ((libGHLo_gv_mapNotifications.lv_mostRecentPingLocation == null) || (DistanceBetweenPoints(libGHLo_gv_mapNotifications.lv_mostRecentPingLocation, UnitGetPosition(EventUnit())) > libGHLo_gv_mapNotifications.lv_minimumPickupSpacing) || (TimerGetElapsed(libGHLo_gv_mapNotifications.lv_mostRecentTimer) >= libGHLo_gv_mapNotifications.lv_pingDuration)))) {
        libNtve_gf_CreatePingFacingAngle(libGHLo_gv_mapNotificationObs, "PingBonus", UnitGetPosition(EventUnit()), Color(100.00, 100.00, 0.00), libGHLo_gv_mapNotifications.lv_pingDuration, -90.0);
        PingSetObserver(PingLastCreated(), true);
        PingSetUnit(PingLastCreated(), EventUnit());
        libGHLo_gv_mapNotifications.lv_mostRecentPingLocation = PingGetPosition(PingLastCreated());
        TimerStart(libGHLo_gv_mapNotifications.lv_mostRecentTimer, libGHLo_gv_mapNotifications.lv_pingDuration, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_MapNotificationsDrop_Init () {
    libGHLo_gt_MapNotificationsDrop = TriggerCreate("libGHLo_gt_MapNotificationsDrop_Func");
    TriggerAddEventUnitCargo(libGHLo_gt_MapNotificationsDrop, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Notifications - Scanner Sweep
//--------------------------------------------------------------------------------------------------
bool libGHLo_gt_MapNotificationsScannerSweep_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(libGHLo_gv_mapNotificationObs, "ScannerSweepModel", EventUnitTargetPoint(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)), libGHLo_gv_mapNotifications.lv_scannerSweepDuration, 0.0);
    PingSetObserver(PingLastCreated(), true);
    PingSetScale(PingLastCreated(), 0.035);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGHLo_gt_MapNotificationsScannerSweep_Init () {
    libGHLo_gt_MapNotificationsScannerSweep = TriggerCreate("libGHLo_gt_MapNotificationsScannerSweep_Func");
    TriggerAddEventUnitAbility(libGHLo_gt_MapNotificationsScannerSweep, null, AbilityCommand("ScannerSweep", 0), c_unitAbilStageExecute, false);
}

void libGHLo_InitTriggers () {
    libGHLo_gt_GameHeartInitialization_Init();
    libGHLo_gt_GraphsInitialization_Init();
    libGHLo_gt_GraphsTimer_Init();
    libGHLo_gt_LabelsInitialization_Init();
    libGHLo_gt_LabelsUnitCreated_Init();
    libGHLo_gt_LabelsUnitTrainingStarted_Init();
    libGHLo_gt_LabelsResearchStarted_Init();
    libGHLo_gt_LabelsUnitTrainingStopped_Init();
    libGHLo_gt_LabelsResearchStopped_Init();
    libGHLo_gt_LabelsReactorDestroyed_Init();
    libGHLo_gt_UpgradeNotificationsInitialization_Init();
    libGHLo_gt_UpgradeNotificationsResearchCancelled_Init();
    libGHLo_gt_UpgradeNotificationsResearchCompleted_Init();
    libGHLo_gt_UpgradeNotificationsResearchStarted_Init();
    libGHLo_gt_UpgradeNotificationsDestructionTimerRunsOut_Init();
    libGHLo_gt_WorkersKilledNotificationsInitialization_Init();
    libGHLo_gt_WorkersKilledNotificationsWorkerKilled_Init();
    libGHLo_gt_WorkersKilledNotificationsTimerRunsOut_Init();
    libGHLo_gt_MapNotificationsDrop_Init();
    libGHLo_gt_MapNotificationsScannerSweep_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGHLo_InitLib_completed = false;

void libGHLo_InitLib () {
    if (libGHLo_InitLib_completed) {
        return;
    }

    libGHLo_InitLib_completed = true;

    libGHLo_InitLibraries();
    libGHLo_InitVariables();
    libGHLo_InitTriggers();
}

